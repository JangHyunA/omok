package omok;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

public class ApiExplorer {
    public static void main(String[] args) throws IOException {
        StringBuilder urlBuilder = new StringBuilder("http://openapi.epost.go.kr/postal/retrieveNewAdressAreaCdService/retrieveNewAdressAreaCdService/getNewAddressListAreaCd"); /*URL*/
        urlBuilder.append("?" + URLEncoder.encode("serviceKey","UTF-8") + "isA%2Fdo3wBhMF7rTWwSJP93HKC%2BEGgHbcqyu7mBvIZonRAR8%2BmM4CDX9B%2BvTbC8gYwH2B4kqQPWydMtjljUEHZA%3D%3D"); /*Service Key*/
        urlBuilder.append("&" + URLEncoder.encode("searchSe","UTF-8") + "=" + URLEncoder.encode("dong", "UTF-8")); /*dong : 동(읍/면)명road :도로명[default]post : 우편번호*/
        urlBuilder.append("&" + URLEncoder.encode("srchwrd","UTF-8") + "=" + URLEncoder.encode("주월동 408-1", "UTF-8")); /*검색어*/
        urlBuilder.append("&" + URLEncoder.encode("countPerPage","UTF-8") + "=" + URLEncoder.encode("10", "UTF-8")); /*페이지당 출력될 개수를 지정*/
        urlBuilder.append("&" + URLEncoder.encode("currentPage","UTF-8") + "=" + URLEncoder.encode("1", "UTF-8")); /*출력될 페이지 번호*/
        URL url = new URL(urlBuilder.toString());
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("GET");
        conn.setRequestProperty("Content-type", "application/json");
        System.out.println("Response code: " + conn.getResponseCode());
        BufferedReader rd;
        if(conn.getResponseCode() >= 200 && conn.getResponseCode() <= 300) {
            rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
        } else {
            rd = new BufferedReader(new InputStreamReader(conn.getErrorStream()));
        }
        StringBuilder sb = new StringBuilder();
        String line;
        while ((line = rd.readLine()) != null) {
            sb.append(line);
        }
        rd.close();
        conn.disconnect();
        System.out.println(sb.toString());
    }
    
    public static List<String> parseXMLGetAddress(String xml) {
        List<String> addresses = new ArrayList<>();
        
        try {
           // XML 파싱을 위한 DocumentBuilder 생성
             DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
             DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();

             // XML 문자열 파싱
             Document doc = dBuilder.parse(new InputSource(new StringReader(xml)));
             
             // "lnmAdres" 엘리먼트(주소)를 가져오기
             NodeList lnmAdresList = doc.getElementsByTagName("lnmAdres");
             // "zipNo" 엘리먼트(우편번호)를 가져오기
             NodeList zipNoList = doc.getElementsByTagName("zipNo");
             
             for (int i = 0; i < lnmAdresList.getLength(); i++) {
                 Element lnmAdresElement = (Element) lnmAdresList.item(i);
                 Element zipNoElement = (Element) zipNoList.item(i);
                 
                 String address = lnmAdresElement.getTextContent();
                 String zipNo = zipNoElement.getTextContent();
                 
                 addresses.add("우편번호: " + zipNo + ", 주소: " + address);
             }

             if (addresses.isEmpty()) {
                 addresses.add("주소 정보를 찾을 수 없음");
             }
         } catch (Exception e) {
             e.printStackTrace();
             addresses.add("주소 정보를 찾을 수 없음");
         }
         return addresses;
     }
}
