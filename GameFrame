package omok;

import javax.swing.*;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;

public class GameFrame extends JFrame{
	
	/* Panel */
	JPanel basePanel = new JPanel(new BorderLayout());
	JPanel centerPanel = new JPanel();
	JPanel eastPanel = new JPanel();
	
	/* List */
	JList<String> everyuserList = new JList<String>();
	
	/* Label */
	JLabel la1 = new JLabel();
	JLabel player1 = new JLabel();
	JLabel player2 = new JLabel();
//	JLabel la2 = new JLabel();
	JLabel la3 = new JLabel();
	JLabel enableL = new JLabel();
	
	/* Button */
//	JButton searchBtn = new JButton("전적검색");
	JButton userBtn = new JButton("접속회원 모두보기");
	JButton chatBtn = new JButton("전송");
	JButton editBtn = new JButton("편집");
	JButton loseBtn = new JButton("기권하기");
	
	String selUser;	//선택된 사용자
	String nickName ="";		//닉네임
	String roomName = "";	// 방 이름
	
	String dc = "";	//돌 색깔
	int col;		//돌 색깔
	
	int omok[][] = new int[20][20];	//오목 위치 배열
	boolean enable = false;	//돌을 둘 수 있는지 여부
	
	Client c = null;
	
//	final String searchTag = "SEARCH";	//전적 조회 기능 태그
	final String uroomTag = "UROOM";
	final String rexitTag = "REXIT";	//방 퇴장 기능 태그
	final String omokTag = "OMOK";		//오목 기능 태그
	final String blackTag = "BLACK";	//검정색 돌 태그
	final String whiteTag = "WHITE";	//흰색 돌 태그
	final String winTag = "WIN";		//승리 태그
	final String loseTag = "LOSE";		//패배 태그
	final String VimgTag = "VIMG";
	final String imgPathTag = "IMGPATH";	// 이미지 절대경로
	
	/* Socket과 입출력 스트림 */
	ServerSocket svr_socket;
    Socket socket;
    BufferedReader reader;
    PrintWriter writer;
    
    
	JTextArea chatTextArea;
	
	// 이미지를 로드할 때 사용할 ImageIcons
    ImageIcon player1Icon;
    ImageIcon player2Icon;
    
    // 추가된 메소드: 이미지를 동적으로 변경하는 메소드
    public void setPlayer1Image(String imagePath) {
        ImageIcon newIcon = new ImageIcon(imagePath);
        player1Icon = newIcon;
        player1.setIcon(player1Icon);
    }

    public void setPlayer2Image(String imagePath) {
        ImageIcon newIcon = new ImageIcon(imagePath);
        player2Icon = newIcon;
        player2.setIcon(player2Icon);
    }
    
    // 이미지 경로를 요청하는 메소드
    void requestImagePaths() {
        c.sendMsg(imgPathTag + "//"+ " ");
    }

    // 이미지 경로를 처리하는 메소드
    void handleImagePaths(String[] imagePaths) {
        if (imagePaths.length >= 2) {
            setPlayer1Image(imagePaths[0]);
            setPlayer2Image(imagePaths[1]);
        }
    }

	
	GameFrame(Client _c) {
		c = _c;

		
		/* Label 크기 작업 */
		la1.setPreferredSize(new Dimension(250, 10));
	    player1.setPreferredSize(new Dimension(110, 130));
	    player2.setPreferredSize(new Dimension(110, 130));
//		la2.setPreferredSize(new Dimension(155, 0));
		enableL.setPreferredSize(new Dimension(235, 30));
		enableL.setHorizontalAlignment(JLabel.CENTER);
		enableL.setForeground(Color.RED);
		la3.setPreferredSize(new Dimension(250, 10));
		
		// 이미지 아이콘 초기화
        player1Icon = new ImageIcon("path/to/default/player1_image.jpg");
        player2Icon = new ImageIcon("path/to/default/player2_image.jpg");
        
        // 이미지 경로 요청
        requestImagePaths();
        
        /* Label에 이미지 아이콘 설정 */
        player1.setIcon(player1Icon);
        player2.setIcon(player2Icon);
        
        // Add borders to the player labels
        player1.setBorder(BorderFactory.createLineBorder(Color.BLACK, 2));
        player2.setBorder(BorderFactory.createLineBorder(Color.BLACK, 2));

		
		/* Button 크기 작업 */
//		searchBtn.setPreferredSize(new Dimension(90, 50));
		userBtn.setPreferredSize(new Dimension(235, 30));
		chatBtn.setPreferredSize(new Dimension(60, 30));
		loseBtn.setPreferredSize(new Dimension(165, 30));
		editBtn.setPreferredSize(new Dimension(65, 30));
		
		
		/* Panel 추가 작업 */
		setContentPane(basePanel);	//panel을 기본 컨테이너로 설정
		
		centerPanel.setPreferredSize(new Dimension(625, 652));
		centerPanel.setLayout(new FlowLayout());
		
		eastPanel.setPreferredSize(new Dimension(250, 200));
		eastPanel.setLayout(new FlowLayout());
		
		centerPanel.setBackground(new Color(206,167,61));
		centerPanel.setLayout(null);
		
		basePanel.add(centerPanel, BorderLayout.CENTER);
		basePanel.add(eastPanel, BorderLayout.EAST);
				
		eastPanel.add(la1);
        eastPanel.add(player1);
        eastPanel.add(player2);
//		eastPanel.add(la2);
		eastPanel.add(userBtn);
		eastPanel.add(player1);
		eastPanel.add(player2);
//		eastPanel.add(searchBtn);
		eastPanel.add(enableL);
		eastPanel.add(la3);
		
		// 채팅창 생성
		chatTextArea = new JTextArea();
		chatTextArea.setEditable(false); // 편집 불가능하도록 설정

		// JScrollPane으로 채팅창 감싸기
		JScrollPane scrollPane = new JScrollPane(chatTextArea);
		scrollPane.setPreferredSize(new Dimension(230, 270)); // 크기 설정

		// 패널에 스크롤 패널 추가
		eastPanel.add(scrollPane);
		
		// 채팅 입력 칸 생성
		JTextField chatInput = new JTextField();
		chatInput.setPreferredSize(new Dimension(160, 30)); // 크기 조정

		// 채팅 입력 칸과 전송 버튼을 담을 패널 생성
		JPanel chatPanel = new JPanel();
		chatPanel.setLayout(new FlowLayout());
		chatPanel.add(chatInput);
		chatPanel.add(chatBtn);
		eastPanel.add(chatPanel);

		eastPanel.add(chatBtn);
		eastPanel.add(loseBtn);
		eastPanel.add(editBtn);
		
		loseBtn.setPreferredSize(new Dimension(160, 30));  // 기권하기 버튼 너비 조정
		
		// ActionListener를 구현하여 "편집" 버튼을 클릭했을 때 실행할 코드를 작성합니다.
	    editBtn.addActionListener(new ActionListener() {
	         @Override
	         public void actionPerformed(ActionEvent e) {
	             // 폰트 색상을 선택하는 색상 대화상자를 엽니다.
	             Color selectedColor = JColorChooser.showDialog(null, "폰트 색상 선택", Color.BLACK);

	             // 선택한 색상을 chatTextArea에 적용합니다.
	             chatTextArea.setForeground(selectedColor);
	         }
	    });

		
		
		// 클라이언트 소켓 초기화
        try {
        	
        	socket = new Socket("localhost", 1228); // 서버 주소와 포트번호를 실제 값으로 변경
         	reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
           	writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(socket.getOutputStream())), true);
        } catch (IOException e) {
       		System.out.println("클라이언트의 소켓 오류 // 접속 오류 "+ e.toString());
       		 e.printStackTrace();
       	}
        
        // 채팅 전송 버튼 리스너
        chatBtn.addActionListener(new ActionListener() {            @Override
            public void actionPerformed(ActionEvent e) {
                sendMessage(chatInput.getText());
            }
			private void sendMessage(String message) {
	                // 메시지를 서버로 전송
				if (!message.isEmpty()) {
	    					// Client -> 서버 전송
	    					c.sendMsg("CHAT//"+roomName+"//"+nickName+"//"+ message);
					}
	                chatInput.setText(""); // 입력 필드 초기화
	                // 채팅창에 보낸 메시지 표시
	                chatTextArea.append(nickName+": " + message + "\n");
			}
        });
       
		
		/* Button 이벤트 리스너 추가 */
		ButtonListener bl = new ButtonListener();
		loseBtn.addActionListener(bl);
		editBtn.addActionListener(bl);
		chatBtn.addActionListener(bl);
		userBtn.addActionListener(bl);
//		searchBtn.addActionListener(bl);

		
		/* Mouse 이벤트 리스너 추가 */
		DolAction da = new DolAction();
		centerPanel.addMouseListener(da);
		
		/* Button 이벤트 리스너 추가 */
		userBtn.addActionListener(new ActionListener() {
		    @Override
		    public void actionPerformed(ActionEvent e) {
		        if (!everyuserList.isSelectionEmpty()) {
		            String[] m = everyuserList.getSelectedValue().split(" : ");
		            selUser = m[0];
		            System.out.println(selUser);
		        }
		    }
		});
		
	

		setSize(885, 660);
		setResizable(false);
		setLocationRelativeTo(null);
	}
	
	// 이미지를 동적으로 변경하는 메소드
    public void setPlayer1Image(ImageIcon imageIcon) {
        player1Icon = imageIcon;
        player1.setIcon(player1Icon);
    }

    public void setPlayer2Image(ImageIcon imageIcon) {
        player2Icon = imageIcon;
        player2.setIcon(player2Icon);
    }
	
	@Override
	public void paint(Graphics g) {	//panel에 그리기 작업
		super.paintComponents(g);
		g.setColor(Color.BLACK);
		
		for(int i=1; i<=20; i++) {
			g.drawLine(30, i*30+20, 30*20, i*30+20);	//가로 줄 그리기
			g.drawLine(i*30, 50, i*30, 30*20+20);	//세로 줄 그리기
		}
		
		drawdol(g);	//돌 그리기
	}
	
	void drawdol(Graphics g) {	//돌 그리기 작업
		for(int i=0; i<20; i++){
			for(int j=0;j<20;j++){
				if(omok[j][i]==1) {			//1일 때 검정 돌
					g.setColor(Color.BLACK);
					g.fillOval((i+1)*30-12, (j)*30+37, 25, 25);
				}
				else if(omok[j][i]==2) {	//2일 때 흰 돌
					g.setColor(Color.WHITE);
					g.fillOval((i+1)*30-12, (j)*30+37, 25, 25);
				}
			}
		}
	}
	
	void remove() {	//돌 초기화 작업
		for(int i=0; i<20; i++) {
			for(int j=0;j<20;j++) {
				omok[i][j] = 0;
			}
		}
		repaint();
	}
	
	/* GameFrame 클래스 내에 서버로부터 사용자 목록을 요청하는 메소드 추가 */
	void requestUserList() {
	    c.sendMsg(uroomTag + "//");
	}
	
	/* 서버에서 받은 사용자 목록을 처리하는 메소드 */
    void handleUserList(String userList) {
        // userList를 파싱하여 배열로 만듭니다. 예시 코드이며 실제 데이터 형식에 맞게 수정 필요합니다.
        String[] users = userList.split(",");

        // 사용자 목록을 새로운 창에 표시
        showRoomUsers(users);
    }

    /* 사용자 목록을 새로운 창에 표시하는 메소드 */
    void showRoomUsers(String[] roomUsers) {
        // JFrame 생성
        JFrame userFrame = new JFrame("현재 방에 있는 사용자 목록");
        userFrame.setSize(300, 200);
        userFrame.setLocationRelativeTo(null);

        // JPanel 생성
        JPanel userPanel = new JPanel();
        userPanel.setLayout(new BoxLayout(userPanel, BoxLayout.Y_AXIS));

        // JLabel로 사용자 목록 추가
        for (String user : roomUsers) {
            JLabel userLabel = new JLabel(user);
            userPanel.add(userLabel);
        }

        // JScrollPane으로 JPanel 감싸기
        JScrollPane scrollPane = new JScrollPane(userPanel);
        userFrame.add(scrollPane);

        // JFrame 표시
        userFrame.setVisible(true);
    }
	
	/* Button 이벤트 리스너 */
	class ButtonListener implements ActionListener{
		@Override
		public void actionPerformed(ActionEvent e) {
			JButton b = (JButton)e.getSource();
			
//			/* 전적검색 버튼 이벤트 */
//			if(b.getText().equals("전적검색")) {
//				if(selUser != null) {	//selUser가 null이 아니면 서버에 "태그//닉네임" 형태의 메시지를 전송
//					c.sendMsg(searchTag + "//" + selUser);
//				} else {				//selUser가 null이면 전적검색 시도 실패
//					JOptionPane.showMessageDialog(null, "검색할 닉네임을 선택해주세요", "검색 실패", JOptionPane.ERROR_MESSAGE);
//				}
//			}
			
			/* 접속회원 모두보기 버튼 이벤트 */
	        if (b.getText().equals("접속회원 모두보기")) {
	            c.sendMsg(uroomTag + "//");
	        }
			
			/* 기권하기 버튼 이벤트 */
			else if (b.getText().equals("기권하기")) {
				c.sendMsg(loseTag + "//");	//서버에 패배 태그 전송
				dispose();					//인터페이스 닫음
				c.mf.setVisible(true);
			}
		}
	}
	
	/* Mouse 이벤트 리스너 : 돌 올릴 위치 선정 */
	class DolAction implements MouseListener{
		@Override
		public void mousePressed(MouseEvent e) {
			if(!enable) return;		//누를 수 없으면 return
			
			//각 좌표 계산
			int x = (int)(Math.round(e.getX() / (double)30) - 1);
			int y = (int)(Math.round(e.getY() / (double)30) - 1);
			
			if(x<0 || x>19 || y<0 || y>19) return;			//둘 수 없는 위치면 return
			if(omok[y][x] == 1 || omok[y][x] == 2) return;	//다른 돌이 있으면 return
			
			System.out.println("[Client] 돌을 (" + x + ", " + y + ")에 두었습니다");	//돌을 둔 위치를 알림

			if(dc.equals(blackTag)) {	//검정색 태그면 1
				omok[y][x] = 1;
				col = 1;
			} else {					//흰색 태그면 2
				omok[y][x] = 2;
				col = 2;
				
			}
			c.sendMsg(omokTag + "//" + x + "//" + y + "//" + dc);	//서버에 오목 태그, 좌표, 돌 색깔을 전송
			
			repaint();
			
			if(check(new Point(x, y), col)) {	//이겼는지 확인. true면 서버에 승리 태그 전송
				c.sendMsg(winTag + "//");
				JOptionPane.showMessageDialog(null, "게임에 승리하였습니다", "승리", JOptionPane.INFORMATION_MESSAGE);
				remove();
				dispose();	//인터페이스 닫음
				c.mf.setVisible(true);
			}
			
			enable = false;	//돌을 두면 false로 바꿈
			enableL.setText("상대가 두기를 기다리는 중...");	//본인 차례인지 아닌지 알려줌
		}
		
		public void mouseClicked(MouseEvent e) { }
		public void mouseReleased(MouseEvent e) { }
		public void mouseEntered(MouseEvent e) { }
		public void mouseExited(MouseEvent e) { }
	}
	
	//승리 여부를 확인하는 메소드. 승리 시 true, 승리가 아니면 false를 반환
	boolean check(Point p, int c) {
		/* 돌을 올린 위치의 가로, 세로, 대각선에 같은 색의 돌이 연달아 4개가 있으면 true를 반환 */
		if(count(p, 1, 0, c) + count(p, -1, 0, c) == 4) {	//가로
			return true;
		}
		
		if(count(p, 0, 1, c) + count(p, 0, -1, c) == 4) {	//세로
			return true;
		}
		
		if(count(p, -1, -1, c) + count(p, 1, 1, c) == 4) {	//오른쪽 대각선
			return true;
		}
		
		if(count(p, 1, -1, c) + count(p, -1, 1, c) == 4) {	//왼쪽대각선
			return true;
		}
		
		return false;
	}
	
	//특정 위치에 같은 색의 돌이 있는지 확인하는 메소드.
	int count(Point p, int _x, int _y, int c) {
		int i=0;
		// omok[p.y+(i+1)*_y][p.x+(i+1)*_x]==c가 true면 i가 무한대로 증가한다.
		for(i=0; omok[p.y+(i+1)*_y][p.x+(i+1)*_x]==c; i++);
		return i;
	}
}
