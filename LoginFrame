package omok;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class LoginFrame extends JFrame {

    private ImageIcon backgroundImage = new ImageIcon("D:/hyuna/login.png");

    // 로그인 창의 UI 구성 요소들
    private JLabel idL = new JLabel("아이디");
    private JLabel pwL = new JLabel("비밀번호");
    JTextField id = new JTextField();
    JPasswordField pw = new JPasswordField();
    private JButton loginBtn = new JButton("로그인");
    private JButton joinBtn = new JButton("회원가입");
    private JButton exitBtn = new JButton("게임종료");
    private JButton findIdBtn = new JButton("아이디 찾기");
    private JButton findPwBtn = new JButton("비밀번호 찾기");

    private Client c = null;
    private Connection connection;
    private Statement stmt;

    private final String loginTag = "LOGIN";

    public LoginFrame(Client _c) {
        c = _c;

        connection = getConnection();

        try {
            stmt = connection.createStatement();
        } catch (SQLException e) {
            e.printStackTrace();
        }

        // 배경 이미지를 설정하는 패널
        setContentPane(new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                g.drawImage(backgroundImage.getImage(), 0, 0, getWidth(), getHeight(), this);
            }
        });

        setTitle("로그인");
        setLayout(null);

        // UI 구성 요소들의 크기 및 위치 설정
        idL.setBounds(20, 110, 80, 30);
        id.setBounds(120, 110, 180, 30);
        pwL.setBounds(20, 150, 80, 30);
        pw.setBounds(120, 150, 180, 30);
        loginBtn.setBounds(320, 113, 100, 63);
        joinBtn.setBounds(20, 200, 180, 35);
        exitBtn.setBounds(230, 200, 180, 35);
        findIdBtn.setBounds(20, 240, 180, 35);
        findPwBtn.setBounds(230, 240, 180, 35);

        // 이벤트 리스너 등록
        ButtonListener bl = new ButtonListener();
        loginBtn.addActionListener(bl);
        exitBtn.addActionListener(bl);
        joinBtn.addActionListener(bl);
        findIdBtn.addActionListener(bl);
        findPwBtn.addActionListener(bl);

        KeyBoardListener kl = new KeyBoardListener();
        id.addKeyListener(kl);
        pw.addKeyListener(kl);

        // UI 구성 요소들을 프레임에 추가
        add(idL);
        add(id);
        add(pwL);
        add(pw);
        add(loginBtn);
        add(joinBtn);
        add(exitBtn);
        add(findIdBtn);
        add(findPwBtn);

        setSize(450, 330);
        setLocationRelativeTo(null);
        setVisible(true);
        setResizable(false);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }

    public Connection getConnection() {
        Connection connection = null;
        try {
            // 데이터베이스 연결 코드 작성
            connection = DriverManager.getConnection("jdbc:mysql://localhost/omok?serverTimezone=Asia/Seoul", "root", "0000");
        } catch (SQLException e) {
            e.printStackTrace();
            // 예외 처리 로직을 추가할 수 있음
        }
        return connection;
    }

    public void findId(String name, String email) {
        try {
            // Statement 객체를 초기화
            Statement stmt = connection.createStatement();

            // 이름과 이메일을 사용하여 아이디 찾기 로직을 수행하는 쿼리
            String query = "SELECT id FROM member WHERE name='" + name + "' AND email='" + email + "'";
            ResultSet result = stmt.executeQuery(query);

            if (result.next()) {
                String foundId = result.getString("id");
                // 아이디를 찾았을 때의 처리
                JOptionPane.showMessageDialog(null, "아이디를 찾았습니다: " + foundId, "아이디 찾기", JOptionPane.INFORMATION_MESSAGE);
            } else {
                // 해당하는 조건의 회원이 없을 때의 처리
                JOptionPane.showMessageDialog(null, "일치하는 회원이 없습니다.", "아이디 찾기", JOptionPane.INFORMATION_MESSAGE);
            }

            // Statement를 닫아줌
            stmt.close();
        } catch (SQLException e) {
            e.printStackTrace();
            // 예외 처리 로직을 추가할 수 있음
        }
    }

    public void findPassword(String id, String email) {
        try {
            // Statement 객체를 초기화
            Statement stmt = connection.createStatement();

            // 아이디와 이메일을 사용하여 비밀번호 찾기 로직을 수행하는 쿼리
            String query = "SELECT password FROM member WHERE id='" + id + "' AND email='" + email + "'";
            ResultSet result = stmt.executeQuery(query);

            if (result.next()) {
                String foundPassword = result.getString("password");
                // 비밀번호를 찾았을 때의 처리
                JOptionPane.showMessageDialog(null, "비밀번호를 찾았습니다: " + foundPassword, "비밀번호 찾기", JOptionPane.INFORMATION_MESSAGE);
            } else {
                // 해당하는 조건의 회원이 없을 때의 처리
                JOptionPane.showMessageDialog(null, "일치하는 회원이 없습니다.", "비밀번호 찾기", JOptionPane.INFORMATION_MESSAGE);
            }

            // Statement를 닫아줌
            stmt.close();
        } catch (SQLException e) {
            e.printStackTrace();
            // 예외 처리 로직을 추가할 수 있음
        }
    }

    /* Button 이벤트 리스너 */
    class ButtonListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            JButton b = (JButton) e.getSource();

            /* TextField에 입력된 아이디와 비밀번호를 변수에 초기화 */
            String uid = id.getText();
            String upass = "";
            for (int i = 0; i < pw.getPassword().length; i++) {
                upass = upass + pw.getPassword()[i];
            }

            /* 게임종료 버튼 이벤트 */
            if (b.getText().equals("게임종료")) {
                System.out.println("[Client] 게임 종료");
                System.exit(0);
            }

            /* 회원가입 버튼 이벤트 */
            else if (b.getText().equals("회원가입")) {
                System.out.println("[Client] 회원가입 인터페이스 열림");
                c.jf.setVisible(true);
                String _role = "";
                String[] roles = {"일반회원", "관리자"};
                int select = JOptionPane.showOptionDialog(null,
                        "회원 가입 유형을 선택해주세요.",
                        "회원 가입",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        null,
                        roles,
                        roles[0]);
                // 배열의 인덱스 번호로 반환
                if (select == 1) {
                    String code = JOptionPane.showInputDialog(null, "관리자 코드를 입력해주세요", "관리자 코드 확인", JOptionPane.WARNING_MESSAGE);

                    // 관리자로 회원가입할 때는 정해진 코드로 입력 	-> 후에 DB에서 관리자들만 접근코드 변경 가능!
                    if (code != null) {
                        if (code.equals("admin")) {    // 관리자 코드 : admin
                            _role = roles[1];
                        } else {
                            JOptionPane.showMessageDialog(null, "불일치합니다. 일반회원으로 진행합니다.", "관리자 코드 확인", JOptionPane.ERROR_MESSAGE);
                            _role = roles[0];
                        }
                    }
                } else {
                    _role = roles[0];
                }
                System.out.println(_role);
                c.jf.role = _role;
            }

            /* 로그인 버튼 이벤트 */
            else if (b.getText().equals("로그인")) {
                if (uid.equals("") && !upass.equals("")) {    //아이디 미입력 시 로그인 시도 실패
                    JOptionPane.showMessageDialog(null, "아이디를 입력해주세요", "로그인 실패", JOptionPane.ERROR_MESSAGE);
                    System.out.println("[Client] 로그인 실패 : 아이디 미입력");
                } else if (!uid.equals("") && upass.equals("")) {    //비밀번호 미입력 시 로그인 시도 실패
                    JOptionPane.showMessageDialog(null, "비밀번호를 입력해주세요", "로그인 실패", JOptionPane.ERROR_MESSAGE);
                    System.out.println("[Client] 로그인 실패 : 비밀번호 미입력");
                } else if (!uid.equals("") && !upass.equals("")) {    //로그인 시도 성공
                    c.sendMsg(loginTag + "//" + uid + "//" + upass);    //서버에 로그인 정보 전송
                }
            }

            /* 아이디 찾기 버튼 이벤트 */
            if (b.getText().equals("아이디 찾기")) {
                // 이름과 이메일을 사용하여 아이디 찾기 로직을 수행
                String name = JOptionPane.showInputDialog(null, "이름을 입력하세요", "아이디 찾기", JOptionPane.QUESTION_MESSAGE);
                String email = JOptionPane.showInputDialog(null, "이메일을 입력하세요", "아이디 찾기", JOptionPane.QUESTION_MESSAGE);

                // 입력이 없는 경우 처리
                if (name != null && email != null) {
                    findId(name, email);
                } else {
                    System.out.println("입력이 취소되었습니다.");
                }
            }

            /* 비밀번호 찾기 버튼 이벤트 */
            else if (b.getText().equals("비밀번호 찾기")) {
                // 아이디와 이메일을 사용하여 비밀번호 찾기 로직을 수행
                String id = JOptionPane.showInputDialog(null, "아이디를 입력하세요", "비밀번호 찾기", JOptionPane.QUESTION_MESSAGE);
                String email = JOptionPane.showInputDialog(null, "이메일을 입력하세요", "비밀번호 찾기", JOptionPane.QUESTION_MESSAGE);

                // 입력이 없는 경우 처리
                if (id != null && email != null) {
                    findPassword(id, email);
                } else {
                    System.out.println("입력이 취소되었습니다.");
                }
            }
        }
    }

    /* Key 이벤트 리스너 */
    class KeyBoardListener implements KeyListener {
        @Override
        public void keyPressed(KeyEvent e) {
            /* Enter 키 이벤트 */
            if (e.getKeyCode() == KeyEvent.VK_ENTER) {

                /* TextField에 입력된 아이디와 비밀번호를 변수에 초기화 */
                String uid = id.getText();
                String upass = "";
                for (int i = 0; i < pw.getPassword().length; i++) {
                    upass = upass + pw.getPassword()[i];
                }

                if (uid.equals("") && !upass.equals("")) {
                    JOptionPane.showMessageDialog(null, "아이디를 입력해주세요", "로그인 실패", JOptionPane.ERROR_MESSAGE);
                    System.out.println("[Client] 로그인 실패 : 아이디 미입력");
                } else if (!uid.equals("") && upass.equals("")) {
                    JOptionPane.showMessageDialog(null, "비밀번호를 입력해주세요", "로그인 실패", JOptionPane.ERROR_MESSAGE);
                    System.out.println("[Client] 로그인 실패 : 비밀번호 미입력");
                } else if (!uid.equals("") && !upass.equals("")) {
                    c.sendMsg(loginTag + "//" + uid + "//" + upass);
                }
            }
        }

        public void keyTyped(KeyEvent e) {
        }

        public void keyReleased(KeyEvent e) {
        }

        public static void main(String[] args) {
            SwingUtilities.invokeLater(() -> new LoginFrame(null));
        }
    }
}
