package omok;

import java.net.*;
import java.sql.Connection;
import java.util.Arrays;
import java.awt.Image;
import java.io.*;
import javax.swing.*;

//서버와의 연결과 각 인터페이스를 관리하는 클래스.
public class Client {
	Socket mySocket = null;
	
	/* 메시지 송신을 위한 필드 */
	OutputStream os = null;
	DataOutputStream dos = null;
	
	/* 각 프레임을 관리할 필드 */
	MainFrame mf = null;
	LoginFrame lf = null;
	JoinFrame jf = null;
	RankingFrame rf = null;
	InfoFrame inf = null;
	CInfoFrame cinf = null;
	GameFrame gf = null;
	SRankFrame srf = null;
	AdminFrame af = null;
	AdminInfoFrame aif = null;
	
	ImageIcon imgicon = null;
	
	public static void main(String[] args) {
		Client client = new Client();
		
		try {
			//서버에 연결
			client.mySocket = new Socket("localhost", 1228);
			System.out.println("[Client] 서버 연결 성공");
			
			client.os = client.mySocket.getOutputStream();
			client.dos = new DataOutputStream(client.os);
			
			/* 프레임 생성 */
			client.mf = new MainFrame(client);
			client.lf = new LoginFrame(client);
			client.jf = new JoinFrame(client);
			client.rf = new RankingFrame(client);
			client.inf = new InfoFrame(client);
			client.cinf = new CInfoFrame(client);
			client.gf = new GameFrame(client);
			client.srf = new SRankFrame(client);
			client.af = new AdminFrame(client);
			client.aif = new AdminInfoFrame(client);
			MessageListener msgListener = new MessageListener(client, client.mySocket);
			msgListener.start();	//스레드 시작
		} catch(SocketException e) {
			System.out.println("[Client] 서버 연결 오류 > " + e.toString());
		} catch(IOException e) {
			System.out.println("[Client] 입출력 오류 > " + e.toString());
		}
	}
	
	/* 서버에 메시지 전송 */
	void sendMsg(String _m) {
		try {
			dos.writeUTF(_m);
		} catch(Exception e) {
			System.out.println("[Client] 메시지 전송 오류 > " + e.toString());
		}
	}
}

//서버와의 메시지 송수신을 관리하는 클래스.
//스레드를 상속받아 각 기능과 독립적으로 동작할 수 있도록 한다.
class MessageListener extends Thread{
	Socket socket;
	Client client;
	
	/* 메시지 수신을 위한 필드 */
	InputStream is;
	DataInputStream dis;
	
	ImageIcon imgicon;
	
	String msg;	//수신 메시지 저장
	
	/* 각 메시지를 구분하기 위한 태그 */
	final String loginTag = "LOGIN";	//로그인
	final String joinTag = "JOIN";		//회원가입
	final String overTag = "OVER";		//중복확인
	final String pwTag = "SAFE";		//비밀번호 유효성
	final String postTag = "POST";		//우편번호
	final String imgTag = "IMG";		//프로필이미지
	final String imgPathTag = "IMGPATH";	// 이미지 절대경로
	final String viewTag = "VIEW";		//회원정보조회
    final String VimgTag = "VIMG";		//프로필 이미지 조회
	final String changeTag = "CHANGE";	//회원정보변경
	final String rankTag = "RANK";		//전적조회(전체회원)
	final String croomTag = "CROOM";	//방생성
	final String vroomTag = "VROOM";	//방목록
	final String uroomTag = "UROOM";	//방유저
	final String eroomTag = "EROOM";	//방입장
	final String sroomTag = "SROOM"; //방 관전
	final String cuserTag = "CUSER";	//접속유저
	final String chatTag = "CHAT";		//채팅하기
	final String searchTag = "SEARCH";	//전적조회(한명)
	final String omokTag = "OMOK";		//오목
	final String blackTag = "BLACK";	//검은색 돌
	final String whiteTag = "WHITE";	//흰색 돌
	final String winTag = "WIN";		//승리
	final String loseTag = "LOSE";		//패배
	final String pexitTag = "PEXIT";	//프로그램종료
	final String rexitTag = "REXIT";	//방퇴장
	final String recordTag = "RECORD";	//전적업데이트
	
	//================ 관리자 모드 ===================//
	final String adminTag = "ADMIN"; 	//관리자 접근
	final String juserTag = "JUSER";	//회원가입된 모든 유저
	final String viewUsersTag = "VIEWUSERS"; // 회원정보보기
	final String updateUserTag = "UPDATE"; // 회원 정보 수정
	final String resetpwTag = "RESET";	//비밀번호 초기화
	final String exitroomTag = "EXIT";	//강제 퇴장하기
	final String exitroomUserTag = "EXITUSER"; //강제 퇴장 유저선택
	final String exitroomToUserTag = "EXITTUSER"; 	// 강제 퇴장당한 회원
	final String stayuserTag = "STAYUSER"; // 남아있는 회원
	final String endroomTag = "END";	//강제 종료하기
	final String endroomUserTag = "ENDUSER"; 	// 강제종료 회원
	final String outgameTag = "OUT";	//강제 탈퇴하기
	final String userModeTag = "USERMODE" ;// 회원모드로 변경

	
	MessageListener(Client _c, Socket _s) {
		this.client = _c;
		this.socket = _s;
	}
	
	public void run() {
		try {
			is = this.socket.getInputStream();
			dis = new DataInputStream(is);
		
			while(true) {
				msg = dis.readUTF();	//메시지 수신을 상시 대기한다.
				
				String[] m = msg.split("//");	//msg를 "//"로 나누어 m[]배열에 차례로 집어넣는다.
				
				// 수신받은 문자열들의 첫 번째 배열(m[0])은 모두 태그 문자. 각 기능을 분리한다.
				
				/* 로그인 */
				if(m[0].equals(loginTag)) {
					loginCheck(m[1],m[2]);
				}
				
				/* 회원가입 */
				else if(m[0].equals(joinTag)) {
					joinCheck(m[1]);
				}
				
				/* 중복확인 */
				else if(m[0].equals(overTag)) {
					overlapCheck(m[1]);
				}
				
				/* 비밀번호 유효성 검사 */
				else if(m[0].equals(pwTag)) {
					pwCheck(m[1]);
				}
				
				/* 우편번호 */
				else if(m[0].equals(postTag)) {
					postCheck(m[1]);
				}
				
				/* 회원정보 조회 */
				else if(m[0].equals(viewTag)) {
					viewMyInfo(m[1], m[2], m[3]);
				}
				
				/* 프로필 이미지*/
				else if(m[0].equals(VimgTag)) {
					viewImg(m[1]);
				}
				
				else if(m[0].equals(imgPathTag)) {
					viewImg(m[1]);
				}
				
				/* 전체 전적 조회 */
				else if(m[0].equals(rankTag)) {
					viewRank(m[1]);
				}
				
				/* 회원정보 변경 */
				else if(m[0].equals(changeTag)) {
					changeInfo(m[1]);
				}
				
				/* 방 생성 */
				else if(m[0].equals(croomTag)) {
					createRoom(m[1],m[2]);
				}
				
				/* 접속 유저 */
				else if(m[0].equals(cuserTag)) {
					viewCUser(m[1]);
				}
				
				/* 방 목록 */
				else if (m[0].equals(vroomTag)) {
				    if (m.length > 1) { // 배열크기가 1보다 클 때
				        roomList(m[1]);
				        adroomList(m[1]);
				    } else { // 배열크기가 1보다 작다 == 방이 없다
				        String[] room = {""}; // 방 목록이 비도록 함
				        client.mf.rList.setListData(room);
				        client.af.rList.setListData(room);
				    }
				}
				
				/* 방 입장 */
				else if(m[0].equals(eroomTag)) {
					enterRoom(m[1],m[2],m[3]);
				}
				
				/* 관전모드로 방 입장*/
				else if(m[0].equals(sroomTag)) {
					showRoom(m[1],m[2]);
				}
				
				/* 방 인원 */
				else if(m[0].equals(uroomTag)) {
					roomUser(m[1]);
				}
				
				/* 전적 조회 */
				else if(m[0].equals(searchTag)) {
					searchRank(m[1]);
				}
				
				/* 채팅하기 */
				else if(m[0].equals(chatTag)) {
					chatt(m[1],m[2]);
				}
				
				/* 오목 */
				else if(m[0].equals(omokTag)) {
					inputOmok(m[1], m[2], m[3]);
				}
				
				/* 패배 */
				else if(m[0].equals(loseTag)) {
					loseGame();
				}
				
				/* 승리 */
				else if(m[0].equals(winTag)) {
					winGame();
				}
				
				/* 전적 업데이트 */
 				else if(m[0].equals(recordTag)) {
					dataRecord(m[1]);
				}
				
				//=================관리자 모드 ================//
				
				/* 관리자 접근 확인 */
				else if(m[0].equals(adminTag)) {
					adminCheck(m[1]);
				}
				
				/* 접속 유저 */
				else if(m[0].equals(juserTag)) {
					joinUser(m[1]);
				}
				
				/* 회원 정보 검색 조회 */
				else if(m[0].equals(viewUsersTag)) {
					viewUsers(m[1]);
				}
				
				else if(m[0].equals(updateUserTag)) {
					updateUser(m[1]);
				}
				/* 관리자 - 비밀번호 초기화 */
				else if(m[0].equals(resetpwTag)) {
					resetPw(m[1]);
				}
				
				/* 관리자 모드 - 강제 퇴장 */
				else if(m[0].equals(exitroomTag)) {
					exitroom(m[1],m[2]);
				}
				
				/* 관리자 모드 - 강제 퇴장 회원 선택 */
				else if(m[0].equals(exitroomUserTag)) {
					exitroomUserChoice(m[1],m[2]);
				}
				
				/* 관리자 모드 - 강제 퇴장 회원 */
				else if(m[0].equals(exitroomToUserTag)) {
					exitroomUser(m[1]);
				}
				
				/* 관리자 모드 - 접속 유지 회원 */
				else if(m[0].equals(stayuserTag)) {
					stayUser(m[1],m[2],m[3]);
				}
				
				/* 관리자 모드 - 강제 종료 */
				else if(m[0].equals(endroomTag)) {
					endRoom(m[1]);
				}
				 
				else if(m[0].equals(endroomUserTag)) {
					endRoomUser(m[1]);
				}
				
				/* 관리자 모드 - 강제 탈퇴 */
				else if(m[0].equals(outgameTag)) {
					outUser(m[1]);
				}
			}
		} catch(Exception e) {
			System.out.println("[Client] Error: 메시지 받기 오류 > " + e.toString());
			e.printStackTrace();
		}
	}
	
	/* 로그인 성공 여부를 확인하는 메소드 */
	void loginCheck(String _m,String _r) {	
		if(_m.equals("OKAY")) {	//로그인 성공
			if(_r.equals("ADMIN")) {
				// 관리자모드 vs 회원모드 
				String[] roles = {"회원모드","관리자모드"};
				Object selected = JOptionPane.showOptionDialog(null, 
																	"모드를 선택해주세요",
																	"관리자 전용",
																	JOptionPane.YES_NO_OPTION,
																	JOptionPane.QUESTION_MESSAGE,
																	null,
																	roles,
																	roles[1]);
				if(selected.equals("회원모드")) {
					client.mf.setVisible(true);				
					client.lf.dispose();
				}
				else {
					client.af.setVisible(true);
					client.lf.dispose();
				}

			}
			// 일반 회원 일시 
			else {
				client.mf.setVisible(true);				
				client.lf.dispose();
			}
			System.out.println("[Client] 로그인 성공 : 메인 인터페이스 열림 : 로그인 인터페이스 종료");
			
		}
		
		else {				//로그인 실패
			System.out.println("[Client] 로그인 실패 : 회원정보 불일치");
			JOptionPane.showMessageDialog(null, "로그인에 실패하였습니다", "로그인 실패", JOptionPane.ERROR_MESSAGE);
			client.lf.id.setText("");
			client.lf.pw.setText("");
		}
	}
	
	/* 회원가입 성공 여부를 확인하는 메소드 */
	void joinCheck(String _m) {
		if(_m.equals("OKAY")) {	//회원가입 성공
			JOptionPane.showMessageDialog(null, "회원가입에 성공하였습니다", "회원가입 성공", JOptionPane.INFORMATION_MESSAGE);
			System.out.println("[Client] 회원가입 성공 : 회원가입 인터페이스 종료");
			client.jf.removeAll();
			client.jf.dispose();
		}
		
		else {				//회원가입 실패
			JOptionPane.showMessageDialog(null, "닉네임이나 이름이 중복되었는지 확인하세요", "회원가입 실패", JOptionPane.ERROR_MESSAGE);
			System.out.println("[Client] 회원가입 실패");
			client.jf.name.setText("");
			client.jf.nickname.setText("");
			client.jf.id.setText("");
			client.jf.pw.setText("");
			client.jf.pwConfirm.setText("");
			client.jf.phone1.setText("");
			client.jf.phone2.setText("");
			JoinFrame.post.setText("");
			JoinFrame.road.setText("");
			JoinFrame.detail.setText("");
			client.jf.email.setText("");
			client.jf.proImgL.setIcon(null);		
		}
	}
	
	/* 중복 여부를 확인하는 메소드 */
	void overlapCheck(String _m) {
		if(_m.equals("OKAY")) {	//사용 가능
			System.out.println("[Client] 사용 가능");
			JOptionPane.showMessageDialog(null, "사용 가능한 닉네임/아이디 입니다", "중복 확인", JOptionPane.INFORMATION_MESSAGE);
		}
		
		else {				//사용 불가능
			System.out.println("[Client] 사용 불가능");
			JOptionPane.showMessageDialog(null, "이미 존재하는 닉네임/아이디 입니다", "중복 확인", JOptionPane.ERROR_MESSAGE);
			client.jf.nickname.setText("");
			client.jf.id.setText("");
		}
	}
	
	/* 비밀번호의 유효성을 확인하는 메소드*/
	 void pwCheck(String _m) {
	    if(_m.equals("OKAY")) {   //사용 가능
	        System.out.println("[Client] 비밀번호 사용 가능");
	        JOptionPane.showMessageDialog(null, "사용 가능한 비밀번호 입니다", "비밀번호 확인", JOptionPane.INFORMATION_MESSAGE);
	    }
	      
	    else { //사용 불가능
	        System.out.println("[Client] 비밀번호 사용 불가능");
	        JOptionPane.showMessageDialog(null, "다음 조건을 만족해야 합니다 \n8자 이상, 특수문자 포함, 대,소문자 포함", "비밀번호 확인", JOptionPane.ERROR_MESSAGE);
	        client.jf.pw.setText("");
	    }
	 }
	 
	 /* 우편번호를 검색하는 메소드 */
	 void postCheck(String _m) {
			if(_m.equals("OKAY")){
				System.out.println("[Client] 우편번호 검색 완료");
				JOptionPane.showMessageDialog(null, "우편번호가 검색되었습니다", "우편 번호 확인", JOptionPane.INFORMATION_MESSAGE);
			}
			
			else {
				System.out.println("[Client] 우편번호 검색 오류");
				JOptionPane.showMessageDialog(null,"우편 번호가 검색되지 않았습니다","우편 번호 확인",JOptionPane.ERROR_MESSAGE);
				JoinFrame.post.setText("");
			}
	}
	
	/* 내 정보를 확인하는 메소드 */
	void viewMyInfo(String m1, String m2, String m3) {
		if(!m1.equals("FAIL")) {	//회원정보 조회 성공
			System.out.println("[Client] 회원 정보 조회 성공");
			client.inf.name.setText(m1);
			client.inf.nickname.setText(m2);
			client.inf.email.setText(m3);
		}
		
		else {					//회원정보 조회 실패
			System.out.println("[Client] 회원 정보 조회 실패");
		}
	}
	
	/* 프로필 이미지 확인하는 메소드 */
	void viewImg(String _m) {
		String path = _m;
		  ImageIcon originalImageIcon = new ImageIcon(path);
	
		  // 이미지 아이콘을 레이블 크기에 맞게 조절
          Image originalImage = originalImageIcon.getImage();
          Image scaledImage = originalImage.getScaledInstance(client.inf.proImgL.getWidth(), client.inf.proImgL.getHeight(), Image.SCALE_SMOOTH);
          ImageIcon  scaledImageIcon = new ImageIcon(scaledImage);
          client.inf.proImgL.setIcon(scaledImageIcon);
	}
	
	/* 전적을 출력하는 메소드 */
	void viewRank(String _m) {
		if(!_m.equals("FAIL")) {	//전적 조회 성공
			System.out.println("[Client] 전적 조회 성공");
			String[] user = _m.split("@");
			client.rf.rank.setListData(user);
		}
	}
	
	/* 회원정보 변경 여부를 확인하는 메소드 */
	void changeInfo(String _m) {
		if(_m.equals("OKAY")) {	//회원정보 변경 성공
			System.out.println("[Client] 변경 성공");
			JOptionPane.showMessageDialog(null, "정상적으로 변경되었습니다", "회원정보변경", JOptionPane.INFORMATION_MESSAGE);
		}
		
		else {				//회원정보 변경 실패
			System.out.println("[Client] 이름 변경 실패");
			JOptionPane.showMessageDialog(null, "변경에 실패하였습니다", "회원정보변경", JOptionPane.ERROR_MESSAGE);
		}
	}
	
	
	/* 방 생성 여부를 확인하는 메소드 */
	void createRoom(String _m,String _n) {
		String nick = _n;
		if(_m.equals("OKAY")) {	//방 생성 성공
			System.out.println("[Client] 방 생성 성공");
			client.gf.setVisible(true);
			client.mf.setVisible(false);
			client.gf.setTitle(client.mf.roomName);
			client.gf.roomName = client.mf.roomName;
			client.gf.nickName=nick;
			client.gf.dc = blackTag;	//방을 생성한 사람은 검은 돌
			client.gf.enable = true;	//돌 놓기 가능하게 바꿈
		}
	}
	
	/* 접속 인원을 출력하는 메소드 */
	void viewCUser(String _m) {
		if(!_m.equals("")) {
			String[] user = _m.split("@");
			client.mf.cuList.setListData(user);
			client.af.cuList.setListData(user);
		}
	}
	
	/* 방 목록을 출력하는 메소드 */
	void roomList(String _m) {
		if(!_m.equals("")) {
			String[] room = _m.split("@");
			client.mf.rList.setListData(room);
		}
	}
	
	/* 방 입장 여부를 확인하는 메소드 */
	void enterRoom(String _m,String _n,String _r) {
		String nick = _n;
		String room = _r;

		if(_m.equals("OKAY")) {	//방 입장 성공
			System.out.println("[Client] 방 입장 성공");
			client.gf.setVisible(true);
			client.mf.setVisible(false);
			client.gf.setTitle(client.mf.selRoom);
			client.gf.roomName=client.mf.selRoom;
			client.gf.nickName = nick;
			client.gf.dc = whiteTag;	//방에 입장한 사람은 흰 돌
			client.gf.enable = false;	//돌 놓기 불가능하게 바꿈
		}
		else if(_m.equals("SHOW")) {
			System.out.println("[Client] 관전모드 : 방 입장 시도 ");
			int selected = JOptionPane.showConfirmDialog(null,
					"인원이 마감되었습니다 \n관전모드로 입장하시겠습니까?",
					"관전 모드 알림",
					JOptionPane.YES_NO_OPTION,
					JOptionPane.QUESTION_MESSAGE);
			if(selected == JOptionPane.NO_OPTION) {
				JOptionPane.showMessageDialog(null, "입장을 취소합니다.");
			}
			else {		// 관전모드로 들어가기 동의
				client.sendMsg(sroomTag+"//"+nick+"//"+room);
			}
		}
		else {				//방 입장 실패
			System.out.println("[Client] 방 입장 실패");
			JOptionPane.showMessageDialog(null, "방 입장이 불가합니다.", "방입장", JOptionPane.ERROR_MESSAGE);
		}
	}
	
	/* 관전모드로 방 입장 */
	/* 관전모드는 게임 진행을 제외한 기능을 추가합니다
	 * 게임 보기 가능
	 * 채팅 가능
	 */
	void showRoom(String _m,String _n) {
		if(_m.equals("OKAY")) {
			System.out.println("[Client] 관전모드 입장 성공");
			client.gf.setVisible(true);
			client.mf.setVisible(false);
			client.gf.setTitle(client.mf.selRoom);
			client.gf.roomName=client.mf.selRoom;
			client.gf.nickName=_n;
			client.gf.dc = null;
		//	client.gf.enable= false;		// 돌을 둘 수 없음
			
		}
	}
	
	/* 방 인원 목록을 출력하는 메소드 */
	void roomUser(String _m) {
		if(!_m.equals("")) {
			String[] user = _m.split("@");
			client.gf.userList.setListData(user);
		}
	}
	
	/* 전적 조회 메소드 */
	void searchRank(String _m) {
		if(!_m.equals("FAIL")) {	//전적 조회 성공
			client.srf.setVisible(true);
			client.srf.l.setText(_m);
		}
	}
	
	/* 채팅 기능 메소드 */
	void chatt(String _n,String _m) {
		String nick = _n;
		String msg = _m;
		if(msg !=null) {
			client.gf.chatTextArea.append(nick+": "+msg+"\n");
		}
	}
	
	/* 상대 오목을 두는 메소드 */
	void inputOmok(String m1, String m2, String m3) {
		if(!m1.equals("") || !m2.equals("") || !m3.equals("")) {
			int n1 = Integer.parseInt(m1);
			int n2 = Integer.parseInt(m2);
			
			if(m3.equals(blackTag)) {	//검은 돌 태그면 1
				client.gf.omok[n2][n1] = 1;
			} else {					//흰 돌 태그면 2
				client.gf.omok[n2][n1] = 2;
			}
			client.gf.repaint();
			client.gf.enable = true;	//돌을 놓을 수 있도록 함
			client.gf.enableL.setText("본인 차례입니다.");
		}
	}
	
	/* 패배를 알리는 메소드 */
	void loseGame() {
		System.out.println("[Client] 게임 패배");
		JOptionPane.showMessageDialog(null, "게임에 패배하였습니다", "패배", JOptionPane.INFORMATION_MESSAGE);
		client.gf.remove();	//화면을 지움
		client.gf.dispose();
		client.mf.setVisible(true);
	}
	
	/* 승리를 알리는 메소드 */
	void winGame() {
		System.out.println("[Client] 게임 승리");
		JOptionPane.showMessageDialog(null, "게임에 승리하였습니다", "승리", JOptionPane.INFORMATION_MESSAGE);
		client.gf.remove();	//화면을 지움
		client.gf.dispose();
		client.mf.setVisible(true);
	}
	
	/* 전적 업데이트 여부를 알리는 메소드 */
	void dataRecord(String _m) {
		if(_m.equals("NO")) {			//전적 업데이트 안함
			System.out.println("[Client] 데이터 미반영 : 상대가 없음");
			JOptionPane.showMessageDialog(null, "게임 상대가 없어 전적을 반영하지 않았습니다", "전적반영", JOptionPane.INFORMATION_MESSAGE);
			client.sendMsg(rexitTag + "//");
		} else if(_m.equals("OKAY")) {	//전적 업데이트 성공
			System.out.println("[Client] 데이터 반영 성공");
			JOptionPane.showMessageDialog(null, "전적 반영이 정상적으로 완료되었습니다", "전적반영", JOptionPane.INFORMATION_MESSAGE);
			client.sendMsg(rexitTag + "//");
		} else if(_m.equals("FAIL")) {	//전적 업데이트 실패
			System.out.println("[Client] 데이터 반영 실패");
			JOptionPane.showMessageDialog(null, "시스템 장애로 인하여 전적 반영에 실패하였습니다", "전적반영", JOptionPane.INFORMATION_MESSAGE);
			client.sendMsg(rexitTag + "//");
		}
	}
	//======================  관리자 모드 ========================//
	/* 관리자 접근 메소드 */
	void adminCheck(String m) {
		if(!m.equals("FAIL")) {	// 관리자 접근 성공
			System.out.println("[Client_Admin] 관리자 접근 성공");
			JOptionPane.showMessageDialog(null, m+ "님\n관리자 모드로 들어갑니다","관리자 모드", JOptionPane.INFORMATION_MESSAGE);
	//		client.mf.setVisible(false);
			client.af.setVisible(true);
		}
		else {					// 접근 실패 
			System.out.println("[Client_Admin] 관리자 조회 실패");
			JOptionPane.showMessageDialog(null,"관리자 모드 접근이 거부되었습니다.","관리자 모드",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	/* 관리자모드 방 목록을 출력하는 메소드 */
	void adroomList(String _m) {
		if(!_m.equals("")) {
			String[] room = _m.split("@");
			client.af.rList.setListData(room);
		}
	}
	
	/* 관리자모드 가입 인원을 출력하는 메소드 */
	void joinUser(String _m) {
		if(!_m.equals("FAIL")) {
			String[] user = _m.split("@");
			client.af.juList.setListData(user);
		} else {
			System.out.println("[Client_admin] 가입된 회원 목록 조회 실패");
		}
	}
	
	/* 특정 회원 정보 검색하는 메소드 */
	void viewUsers(String _m) {
		if(!_m.equals("FAIL")) {
			System.out.println("[Client_admin] 회원 정보 조회 성공");
			String[] u =  _m.split("@@");
			System.out.println(Arrays.toString(u));
			if(u[0].equals("USER")) {
				client.aif.user.setSelected(true);
			}else {
				client.aif.admin.setSelected(true);
			}
			
			ImageIcon originalImageIcon = new ImageIcon(u[1]);
		
			  // 이미지 아이콘을 레이블 크기에 맞게 조절
	        Image originalImage = originalImageIcon.getImage();
	        Image scaledImage = originalImage.getScaledInstance(150, 180, Image.SCALE_SMOOTH);
	        ImageIcon  scaledImageIcon = new ImageIcon(scaledImage);
	        client.aif.proImgL.setIcon(scaledImageIcon);
		
			client.aif.nickname.setText(u[2]);
			client.aif.name.setText(u[3]);
			client.aif.id.setText(u[4]);
			client.aif.email.setText(u[5]);
			client.aif.phone.setText(u[6]);
			client.aif.gender.setText(u[7]);
			client.aif.birth_year.setText(u[8]);
			client.aif.birth_month.setText(u[9]);
			client.aif.birth_day.setText(u[10]);
			client.aif.post.setText(u[11]);
			client.aif.road.setText(u[12]);
			client.aif.detail.setText(u[13]);
			client.aif.win.setText(u[14]);
			client.aif.lose.setText(u[15]);
			
			client.aif.o_nickname = u[2];
			client.aif.setVisible(true);
		}
		else {
			System.out.println("[Client_admin] 회원 정보 조회 검색 실패");
		}
	}
	
	/* 회원정보 수정하여 저장하는 메소드 */
	void updateUser(String _m) {
		if(_m.equals("OKAY")) {
			System.out.println("[Client_admin] 회원 정보 수정 성공");
			JOptionPane.showMessageDialog(null, "정상적으로 수정되었습니다", "회원 정보 수정", JOptionPane.INFORMATION_MESSAGE);
			
		}
		else {
			System.out.println("[Client_admin] 회원 정보 수정 실패");
			JOptionPane.showMessageDialog(null, "정보 수정에 실패하였습니다.", "회원 정보 수정", JOptionPane.ERROR_MESSAGE);
			
		}
		
	}
	
	/* 비밀번호 초기화하는 메소드 */
	void resetPw(String _m) {
		if(_m.equals("OKAY")) {	//비밀번호 초기화 성공
			System.out.println("[Client-Admin] 비밀번호 초기화 성공");
			JOptionPane.showMessageDialog(null, "정상적으로 초기화되었습니다", "비밀번호 초기화", JOptionPane.INFORMATION_MESSAGE);
		}
		else {
			System.out.println("[Client-Admin] 비밀번호 초기화 실패");
			JOptionPane.showMessageDialog(null, "초기화 변경에 실패하였습니다", "회원정보 초기화 ", JOptionPane.ERROR_MESSAGE);
		}
	}
	
	/* 강제퇴장 - 방 회원 불러오기*/
	void exitroom(String _r, String _u) {
		String room = _r;
		String user = _u;
		if(!_u.equals("")) {
			
			String[] user_arr = user.split("@");
			String selected = (String) JOptionPane.showInputDialog(null,room+"방 퇴장 회원 선택",room+"강제 퇴장",
										JOptionPane.QUESTION_MESSAGE, null, user_arr, user_arr[0]);
			if(selected == null ) {
				JOptionPane.showMessageDialog(null, "취소합니다.");
			}
			else { 		// 유저 선택후 
				client.sendMsg(exitroomUserTag+"//"+room+"//"+ selected);
			}
		}
	}
	
	/* 강제 퇴장 - 회원 선택 */
	void exitroomUserChoice(String _n, String _u) {
		String user = _u;
		if(_n.equals("OKAY")) {
			JOptionPane.showMessageDialog(null, user+"님 강제 퇴장합니다.","강제 퇴장",JOptionPane.INFORMATION_MESSAGE);
			System.out.println("[Client_admin] 회원 강제퇴장 성공");
		}else {
			JOptionPane.showMessageDialog(null,"강제 퇴장에 실패하였습니다.","강제 퇴장 오류",JOptionPane.ERROR_MESSAGE);
			System.out.println("[Client_admin] 회원 강제 퇴장 실패");
		}
	}
	
	/* 강제 퇴장 - 회원 퇴장  알림*/
	void exitroomUser(String _n) {
		String nick = _n;
		
		JOptionPane.showMessageDialog(null, 
				nick+"님은 관리자에 의해 강제퇴장합니다. \n게임을 종료합니다.",
				"강제 퇴장",
				JOptionPane.ERROR_MESSAGE);
		client.gf.remove();
		client.gf.dispose();
		client.mf.setVisible(true);
				
	}
	
	/* 강제 퇴장 - 접속 유지 회원 알림*/
	void stayUser(String _r,String _n,String _nn) {
		String room = _r;
		String exitnick = _n;
		String nick = _nn;
		JOptionPane.showMessageDialog(null,
				exitnick +"님의 강제퇴장으로 \n 관리자에 의해 방이 초기화 되었습니다.",
				"강제 퇴장 알림",
				JOptionPane.WARNING_MESSAGE);
		// 이전 게임창 파괴
		client.gf.remove();
		client.gf.dispose();			
		
		// 새로운 게임창 생성
		client.gf.setVisible(true);
		client.gf.setTitle(room);
		client.gf.nickName=nick;
		client.gf.dc = blackTag;	//방을 생성한 사람은 검은 돌
		client.gf.enable = true;	//돌 놓기 가능하게 바꿈
	
	}
	
	/* 관리자모드 - 방 강제 종료 */
	void endRoom(String _m) {
		if(_m.equals("OKAY")) {
			System.out.println("[Client_admin] 방 강제종료 성공");
			JOptionPane.showMessageDialog(null,"강제 종료하였습니다. ","방 강제종료",JOptionPane.INFORMATION_MESSAGE);
		
		}else {
			System.out.println("[Client_admin] 방 강제종료 실패");
			JOptionPane.showMessageDialog(null, "강제 종료를 실패하였습니다.","방 강제종료",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	/* 관리자모드 - 강제종료 된 회원 알림 */
	void endRoomUser(String _m) {
		if(_m.equals("OKAY")){
			System.out.println("[Client_admin] 방 강제종료 회원 알림");
			JOptionPane.showMessageDialog(null, 
					"관리자에 의해 강제종료됩니다. 감사합니다.",
					"강제 종료",
					JOptionPane.ERROR_MESSAGE);
			client.gf.remove();
			client.gf.dispose();
			client.mf.setVisible(true);
		}
	}
	
	/* 관리자 모드 - 회원 강제 탈퇴 */
	void outUser(String _m) {
		if(_m.equals("OKAY")) {
			System.out.println("[Client_admin] 회원 강제탈퇴 성공");
			JOptionPane.showMessageDialog(null, "성공적으로 탈퇴했습니다.","회원 탈퇴",JOptionPane.INFORMATION_MESSAGE);
			client.aif.setVisible(false);
			client.aif.dispose();
			client.sendMsg(juserTag+"//");		// 강제 탈퇴후 리스트 업데이트
		}else {
			System.out.println("[Client_admin] 회원 강제탈퇴 실패");
			JOptionPane.showMessageDialog(null, "회원 강제탈퇴에 실패했습니다.","회원 탈퇴",JOptionPane.ERROR_MESSAGE );
		}
	}
}
