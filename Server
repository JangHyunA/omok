package omok;

import java.net.*;
import java.util.*;

import javax.swing.JOptionPane;

import java.io.*;

//클라이언트의 연결 요청 및 입출력을 상시 관리하는 클래스.
public class Server {
	ServerSocket ss = null;
	
	/* 각 객체들을 Vector로 관리 */
	Vector<CCUser> alluser;		//연결된 모든 클라이언트
	Vector<CCUser> waituser;	//대기실에 있는 클라이언트
	Vector<Room> room;			//생성된 Room
	
	public static void main(String[] args) {
		Server server = new Server();
		
		server.alluser = new Vector<>();
		server.waituser = new Vector<>();
		server.room = new Vector<>();
		
		try {
			//서버 소켓 준비
			server.ss = new ServerSocket(1228);
			System.out.println("[Server] 서버 소켓 준비 완료");
			
			//클라이언트의 연결 요청을 상시 대기. 
			while(true) {
				Socket socket = server.ss.accept();
				CCUser c = new CCUser(socket, server);	//소켓과 서버를 넘겨 CCUser(접속한 유저 관리)객체 생성
				
				c.start();	//CCUser 스레드 시작
			}
		} catch(SocketException e) {	//각 오류를 콘솔로 알린다.
			System.out.println("[Server] 서버 소켓 오류 > " + e.toString());
		} catch(IOException e) {
			System.out.println("[Server] 입출력 오류 > " + e.toString());
		}
	}
}

//서버에 접속한 유저와의 메시지 송수신을 관리하는 클래스.
//스레드를 상속받아 연결 요청이 들어왔을 때도 독립적으로 동작할 수 있도록 한다.
class CCUser extends Thread{
	Server server;
	Socket socket;
	
	/* 각 객체를 Vector로 관리 */
	Vector<CCUser> auser;	//연결된 모든 클라이언트
	Vector<CCUser> wuser;	//대기실에 있는 클라이언트
	Vector<Room> room;		//생성된 Room
	
	Database db = new Database();
	
	/* 메시지 송수신을 위한 필드 */
	OutputStream os;
	DataOutputStream dos;
	InputStream is;
	DataInputStream dis;
	PrintWriter writer;
	
	String msg;			//수신 메시지를 저장할 필드
	String nickname;	//클라이언트의 닉네임을 저장할 필드
	
	String imgPath = "";
	
	Room myRoom;		//입장한 방 객체를 저장할 필드
	
	/* 각 메시지를 구분하기 위한 태그 */
	final String loginTag = "LOGIN";	//로그인
	final String joinTag = "JOIN";		//회원가입
	final String overTag = "OVER";		//중복확인
	final String pwTag = "SAFE";		//비밀번호 유효성
	final String postTag = "POST";		//우편번호
	final String imgTag = "IMG";		//프로필이미지
	final String imgPathTag = "IMGPATH";	// 이미지 절대경로
    final String VimgTag = "VIMG";
	final String viewTag = "VIEW";		//회원정보조회
	final String changeTag = "CHANGE";	//회원정보변경
	final String rankTag = "RANK";		//전적조회(전체회원)
	final String croomTag = "CROOM";	//방생성
	final String vroomTag = "VROOM";	//방목록
	final String uroomTag = "UROOM";	//방유저
	final String eroomTag = "EROOM";	//방입장
	final String sroomTag = "SROOM"; 	//방 관전
	final String cuserTag = "CUSER";	//접속유저
	final String chatTag = "CHAT";		//채팅하기
	final String searchTag = "SEARCH";	//전적조회(한명)
	final String omokTag = "OMOK";		//오목
	final String blackTag = "BLACK";	//검은색 돌
	final String whiteTag = "WHITE";	//흰색 돌
	final String winTag = "WIN";		//승리
	final String loseTag = "LOSE";		//패배
	final String pexitTag = "PEXIT";	//프로그램종료
	final String rexitTag = "REXIT";	//방퇴장
	final String recordTag = "RECORD";	//전적업데이트
	
	//================ 관리자 모드 ===================//
	final String adminTag = "ADMIN";  	//관리자 모드 접근
	final String juserTag = "JUSER"; // 회원가입된 모든유저
	final String viewUsersTag = "VIEWUSERS"; // 회원정보보기
	final String updateUserTag = "UPDATE"; // 회원 정보 수정
	final String resetpwTag = "RESET";	//비밀번호 초기화
	final String exitroomTag = "EXIT";	//강제 퇴장하기
	final String exitroomUserTag = "EXITUSER";  // 강제 퇴장 회원 선택 
	final String exitroomToUserTag = "EXITTUSER"; 	// 강제 퇴장당한 회원 
	final String stayuserTag = "STAYUSER"; // 남아있는 회원
	final String endroomTag = "END";	//강제 종료하기
	final String endroomUserTag = "ENDUSER"; 	// 강제종료 회원
	final String outgameTag = "OUT";	//강제 탈퇴하기
	final String userModeTag = "USERMODE" ;// 회원모드로 변경

	
	CCUser(Socket _s, Server _ss) {
		this.socket = _s;
		this.server = _ss;
		
		auser = server.alluser;
		wuser = server.waituser;
		room = server.room;		
	}
	
	public void run() {
		try {
			System.out.println("[Server] 클라이언트 접속 > " + this.socket.toString());
			
			FileInputStream _img = null;
			os = this.socket.getOutputStream();
			dos = new DataOutputStream(os);
			is = this.socket.getInputStream();
			dis = new DataInputStream(is);
			
			while(true) {
				msg = dis.readUTF();	//메시지 수신을 상시 대기한다.
				
				String[] m = msg.split("//");	//msg를 "//"로 나누어 m[]배열에 차례로 집어넣는다.
				
				// 수신받은 문자열들의 첫 번째 배열(m[0])은 모두 태그 문자. 각 기능을 분리한다.
				
				/* 로그인 */
				if(m[0].equals(loginTag)) {
					String[] mm = (db.loginCheck(m[1], m[2])).split("//");
					String nn = mm[0];
					String role = mm[1];
					
					if(!nn.equals("null")) {	//로그인 성공
						nickname = nn;		//로그인한 사용자의 닉네임을 필드에 저장
						
						auser.add(this);	//모든 접속 인원에 추가
						wuser.add(this);	//대기실 접속 인원에 추가
						
						dos.writeUTF(loginTag + "//OKAY//"+role);
						
						sendWait(connectedUser());	//대기실 접속 유저에 모든 접속 인원을 전송
						
						if(room.size() > 0) {	//생성된 방의 개수가 0 이상일 때
							sendWait(roomInfo());	//대기실 접속 인원에 방 목록을 전송
						}
						
					}
					
					else {	//로그인 실패
						dos.writeUTF(loginTag + "//FAIL//"+" ");
					}
				}
				
				/* 이미지 파일 변환  */
				else if(m[0].equals(imgTag)) {
					FileInputStream fis = null;
					try {
						File imgFile = new File(m[1]);
						fis = new FileInputStream(imgFile);
						System.out.println(fis);
					} catch (FileNotFoundException e) {		
						e.printStackTrace();
					}
					_img = fis;
				
				}
				
				else if(m[0].equals(imgPathTag)) {
					imgPath = m[1];
				}
				
				/* 회원가입 */
				else if(m[0].equals(joinTag)) {
				
					if(db.joinCheck(m[1], m[2], m[3], m[4], m[5], m[6], m[7], m[8],m[9], m[10], m[11], m[12], m[13], m[14], _img, imgPath)) {	//회원가입 성공
						dos.writeUTF(joinTag + "//OKAY");
					}
					
					else {	//회원가입 실패
						dos.writeUTF(joinTag + "//FAIL");
					}
				}
				
				/* 중복확인 */
				else if(m[0].equals(overTag)) {
					if(db.overCheck(m[1], m[2])) {	//사용 가능
						dos.writeUTF(overTag + "//OKAY");
					}
					
					else {	//사용 불가능
						dos.writeUTF(overTag + "//FAIL");
					}
				}
				
				/* 비밀번호 유효성 검사 */ 
	            else if(m[0].equals(pwTag)) {
	               if(db.passwordCheck(m[2])) {
	                  dos.writeUTF(pwTag+"//OKAY");
	               }
	               
	               else {
	                  dos.writeUTF(pwTag +"//FAIL");
	               }
	            }
				
				/* 회원정보 조회 */
				else if(m[0].equals(viewTag)) {
					if(!db.viewInfo(nickname).equals("null")) {	//조회 성공
						dos.writeUTF(viewTag + "//" + db.viewInfo(nickname));	//태그와 조회한 내용을 같이 전송
					}
					
					else {	//조회 실패
						dos.writeUTF(viewTag + "//FAIL");
					}
				}
				
				/* 프로필 이미지 - 절대 경로로 조회*/
				else if(m[0].equals(VimgTag)) {
					if(!db.viewImg(nickname).equals("null")) {
						dos.writeUTF(VimgTag+"//"+db.viewImg(nickname));
					}
					else {
						dos.writeUTF(VimgTag+"//FAIL");
					}
				}
				
				/* 회원정보 변경 */
				else if(m[0].equals(changeTag)) {
					if(db.changeInfo(nickname, m[1], m[2])) {	//변경 성공
						dos.writeUTF(changeTag + "//OKAY");
					}
					
					else {	//변경 실패
						dos.writeUTF(changeTag + "//FAIL");
					}
				}
				
			
				/* 전체 전적 조회 */
				else if(m[0].equals(rankTag)) {
					if(!db.viewRank().equals("")) {	//조회 성공
						dos.writeUTF(rankTag + "//" + db.viewRank());	//태그와 조회한 내용을 같이 전송
					}
					
					else {	//조회 실패
						dos.writeUTF(rankTag + "//FAIL");
					}
				}
				
				/* 방 생성 */
				else if(m[0].equals(croomTag)) {
					myRoom = new Room();	//새로운 Room 객체 생성 후 myRoom에 초기화
					myRoom.title = m[1];	//방 제목을 m[1]로 설정
					myRoom.count++;			//방의 인원수 하나 추가
					
					room.add(myRoom);		//room 배열에 myRoom을 추가
					
					myRoom.ccu.add(this);	//myRoom의 접속인원에 클라이언트 추가
					wuser.remove(this);		//대기실 접속 인원에서 클라이언트 삭제
					
					dos.writeUTF(croomTag + "//OKAY//"+nickname);
					System.out.println("[Server] "+ nickname + " : 방 '" + m[1] + "' 생성");
					
					sendWait(roomInfo());	//대기실 접속 인원에 방 목록을 전송
					sendRoom(roomUser());	//방에 입장한 인원에 방 인원 목록을 전송
				}
				
				/* 방 입장 */
				else if(m[0].equals(eroomTag)) {
					for(int i=0; i<room.size(); i++) {	//생성된 방의 개수만큼 반복
						Room r = room.get(i);
						if(r.title.equals(m[1])) {	//방 제목이 같고
							
							if(r.count < 2) {			//방 인원수가 2명보다 적을 때 입장 성공
								myRoom = room.get(i);	//myRoom에 두 조건이 맞는 i번째 room을 초기화
								myRoom.count++;			//방의 인원수 하나 추가
							
								
								wuser.remove(this);		//대기실 접속 인원에서 클라이언트 삭제
								myRoom.ccu.add(this);	//myRoom의 접속 인원에 클라이언트 추가
								sendWait(roomInfo());	//대기실 접속 인원에 방 목록을 전송
								sendRoom(roomUser());	//방에 입장한 인원에 방 인원 목록을 전송
								
								dos.writeUTF(eroomTag + "//OKAY//"+nickname+"//"+" ");
								System.out.println("[Server] " + nickname + "님 - 방 '" + m[1] + "' 입장");
								break;
							}
							else if ( r.count >= 2) {
								dos.writeUTF(eroomTag+"//SHOW//"+nickname+"//"+ r.title);
								System.out.println("[Server] 인원초과. 관전모드 입장");
								break;
							}
							else {	// 입장 & 관전모드 입장 초과
								dos.writeUTF(eroomTag + "//FAIL//"+" "+"//"+" ");
								System.out.println("[Server] " + nickname + " : 방 '" + m[1] + "' 입장 오류");
								break;
							}
						}
						/*
						else {	//같은 방 제목이 없으니 입장 실패
							dos.writeUTF(eroomTag + "//FAIL//"+" "+"//"+" ");
							System.out.println("[Server] " + nickname + " : 방 '" + m[1] + "' 입장 오류");
						}
						*/
					}
				}

				/* 관전모드로 방 입장 */
				else if(m[0].equals(sroomTag)) {
					for(int i =0; i<room.size();i++) {
						Room r = room.get(i);
						if(r.title.equals(m[2])) {
							myRoom = room.get(i);
							myRoom.count++;
							
							wuser.remove(this);
							myRoom.ccu.add(this);
							sendWait(roomInfo());	
							sendRoom(roomUser());
							
							dos.writeUTF(sroomTag+ "//OKAY//"+nickname);
							System.out.println("[Server]"+ nickname+"님 - 방 '"+ m[2]+"' 관전모드로 입장");
						}
						else {
							dos.writeUTF(sroomTag+"//FAIL//"+ " ");						
							System.out.println("[Server]"+ nickname+"님 - 방 '"+ m[2]+"' 관전모드 입장 오류");
						}
					}
				}
				
				/* 전적 조회 */
				else if(m[0].equals(searchTag)) {
					String mm = db.searchRank(m[1]);
					
					if(!mm.equals("null")) {	//조회 성공
						dos.writeUTF(searchTag + "//" + mm);	//태그와 조회한 내용을 같이 전송
					}
					
					else {	//조회 실패
						dos.writeUTF(searchTag + "//FAIL");
					}
				}
				
				/* 채팅 기능*/
				else if (m[0].equals(chatTag)) {
					String rName = m[1];
					String nName = m[2];
					String str = m[3];
					for(int i =0 ; i<room.size();i++) {
						Room r = room.get(i);
						if(r.title.equals(rName)) {
							myRoom = r;
							int s = 0;
							while(s<myRoom.ccu.size()) {
								try {
									if(!myRoom.ccu.get(s).nickname.equals(nName)) {	//발신자를 제외한 접속 회원
										myRoom.ccu.get(s).dos.writeUTF(chatTag+"//"+nName+"//"+str);
									}
									s++;
								}catch(IOException e) {
									e.printStackTrace();
								}
							}
						}
					}
				}
				
				/* 프로그램 종료 */
				else if(m[0].equals(pexitTag)) {
					auser.remove(this);		//전체 접속 인원에서 클라이언트 삭제
					wuser.remove(this);		//대기실 접속 인원에서 클라이언트 삭제
					
					sendWait(connectedUser());	//대기실 접속 인원에 전체 접속 인원을 전송
				}
				
				/* 방 퇴장 */
				else if(m[0].equals(rexitTag)) {
					myRoom.ccu.remove(this);	//myRoom의 접속 인원에서 클라이언트 삭제
					myRoom.count--;				//myRoom의 인원수 하나 삭제
					wuser.add(this);			//대기실 접속 인원에 클라이언트 추가
					
					System.out.println("[Server] " + nickname + " : 방 '" + myRoom.title + "' 퇴장");
					
					if(myRoom.count==0) {	//myRoom의 인원수가 0이면 myRoom을 room 배열에서 삭제
						room.remove(myRoom);
					}
					
					if(room.size() != 0) {	//생성된 room의 개수가 0이 아니면 방에 입장한 인원에 방 인원 목록을 전송
						sendRoom(roomUser());
						
					}
					
					sendWait(roomInfo());		//대기실 접속 인원에 방 목록을 전송
					sendWait(connectedUser());	//대기실 접속 인원에 전체 접속 인원을 전송
				}
				
				
				/* 오목 */
				else if(m[0].equals(omokTag)) {
					for(int i=0; i<myRoom.ccu.size(); i++) {	//myRoom의 인원수만큼 반복
						
						if(!myRoom.ccu.get(i).nickname.equals(nickname)) {	//방 접속 인원 중 클라이언트와 다른 닉네임의 클라이언트에게만 전송
							myRoom.ccu.get(i).dos.writeUTF(omokTag + "//" + m[1] + "//" + m[2] + "//" + m[3]);
						}
					}
				}
				
				/* 승리 및 전적 업데이트 */
				else if(m[0].equals(winTag)) {
					System.out.println("[Server] " + nickname + " 승리");
					
					if(db.winRecord(nickname)) {	//전적 업데이트가 성공하면 업데이트 성공을 전송
						dos.writeUTF(recordTag + "//OKAY");
					} else {						//전적 업데이트가 실패하면 업데이트 실패를 전송
						dos.writeUTF(recordTag + "//FAIL");
					}
					
					for(int i=0; i<myRoom.ccu.size(); i++) {	//myRoom의 인원수만큼 반복
						
						/* 방 접속 인원 중 클라이언트와 다른 닉네임의 클라이언트일때만 */
						if(!myRoom.ccu.get(i).nickname.equals(nickname)) {
							myRoom.ccu.get(i).dos.writeUTF(loseTag + "//");
							
							if(db.loseRecord(myRoom.ccu.get(i).nickname)) {	//전적 업데이트가 성공하면 업데이트 성공을 전송
								myRoom.ccu.get(i).dos.writeUTF(recordTag + "//OKAY");
							} else {										//전적 업데이트가 실패하면 업데이트 실패를 전송
								myRoom.ccu.get(i).dos.writeUTF(recordTag + "//FAIL");
							}
						}
					}
				}
				
				/* 패배, 기권 및 전적 업데이트 */
				else if(m[0].equals(loseTag)) {
					if(myRoom.count==1) {	//기권을 했는데 방 접속 인원이 1명일 때 전적 미반영을 전송
						dos.writeUTF(recordTag + "//NO");
					}
					
					else if(myRoom.count==2) {	//기권 및 패배를 했을 때 방 접속 인원이 2명일 때
						dos.writeUTF(loseTag + "//");
						
						if(db.loseRecord(nickname)) {	//전적 업데이트가 성공하면 업데이트 성공을 전송
							dos.writeUTF(recordTag + "//OKAY");
						} else {						//전적 업데이트가 실패하면 업데이트 실패를 전송
							dos.writeUTF(recordTag + "//FAIL");
						}
						
						for(int i=0; i<myRoom.ccu.size(); i++) {	//myRoom의 인원수만큼 반복
							
							/* 방 접속 인원 중 클라이언트와 다른 닉네임의 클라이언트일때만 */
							if(!myRoom.ccu.get(i).nickname.equals(nickname)) {
								myRoom.ccu.get(i).dos.writeUTF(winTag + "//");
								
								if(db.winRecord(myRoom.ccu.get(i).nickname)) {	//전적 업데이트가 성공하면 업데이트 성공을 전송
									myRoom.ccu.get(i).dos.writeUTF(recordTag + "//OKAY");
								} else {										//전적 업데이트가 실패하면 업데이트 실패를 전송
									myRoom.ccu.get(i).dos.writeUTF(recordTag + "//FAIL");
								}
							}
						}
					}
				}
				
				// ======================= 관리자 모드 ==========================//
				/* 관리자 모드 접근 */
				else if(m[0].equals(adminTag)) {
					if(!db.adminCheck(nickname, m[1]).equals("null")) {
						dos.writeUTF(adminTag+"//"+ db.adminCheck(nickname, m[1]));
						System.out.println(this);
					}
					else {
						dos.writeUTF(adminTag+ "//FAIL");
					}
				}
				
				/* 회원가입된 모든 회원 조회 */
				else if(m[0].equals(juserTag)) {
					if(!db.joinUser().equals("")) {
						dos.writeUTF(juserTag+"//"+db.joinUser());
					}
					else {
						dos.writeUTF(juserTag+"//FAIL");
					}
				}
			
				/* 접속 인원 조회 */
				else if(m[0].equals(cuserTag)) {
					String msg = "";
					for(int i=0; i<auser.size(); i++) {
						msg = msg + auser.get(i).nickname + "@";
					}
					for(int i=0; i<wuser.size(); i++) {
						try {
							wuser.get(i).dos.writeUTF(msg);
						} catch(IOException e) {
							wuser.remove(i--);
						}
					}
					
				}
				/* 회원 정보 조회 - 검색 */
				else if(m[0].equals(viewUsersTag)) {
					if(!db.viewUsers(m[1]).equals("null")) {
						dos.writeUTF(viewUsersTag + "//"+ db.viewUsers(m[1]));
					}
					else { // 회원 정보 조회 실패
						dos.writeUTF(viewUsersTag + "//FAIL");
					}
				}
				
				/* 회원 정보 수정 */
				else if(m[0].equals(updateUserTag)) {
					if(db.updateUserInfo(m[1], m[2], m[3], m[4], m[5], m[6], m[7], m[8], m[9], m[10], m[11], m[12], m[13], m[14], m[15], m[16])) {
						dos.writeUTF(updateUserTag + "//OKAY");
					}
					else {
						dos.writeUTF(updateUserTag + "//FAIL");
					}
				}
				
				/* 비밀번호 초기화 - 관리자 권한 */
				else if(m[0].equals(resetpwTag)) {
					if(db.resetPw( m[1],m[2])) {	//변경 성공
						dos.writeUTF(resetpwTag + "//OKAY");
					}
					
					else {	//변경 실패
						dos.writeUTF(resetpwTag + "//FAIL");
					}
				}
				
				/* 강제 퇴장 이벤트*/
				else if(m[0].equals(exitroomTag)) {
					String msg = "";
					String selRoom = m[1];
					
					for(int i = 0 ; i < room.size() ; i++ ) {
						Room r = room.get(i);
						// 선택된 방 클릭 
						if(r.title.equals(m[1])) {
								for (int u =0; u<r.count;u++) {
									msg = msg + r.ccu.get(u).nickname + "@";
								}
								dos.writeUTF(exitroomTag+"//"+selRoom+"//"+msg);
										
						}
					}
				}
				
				/* 강제 퇴장 - 유저 선택 후 */
				else if(m[0].equals(exitroomUserTag)) {
					String selRoom = m[1];
					String selUser = m[2];
					
					for(int i=0;i<room.size(); i++) {
						Room r = room.get(i);
						
						if(r.title.equals(selRoom)) {	// 방 선택
							
							// 해당 방에서 퇴장할 회원 찾기
							for(int j=0; j<r.ccu.size();j++) {
								if(r.ccu.get(j).nickname.equals(selUser)) { 	// 선택 회원 확인
									r.ccu.get(j).dos.writeUTF(exitroomToUserTag+"//"+selUser);		//강제 퇴장당한 회원에게 메세지
									r.ccu.remove(j);		// 선택 회원 삭제
									r.count--;				// 인원수 1 감소
									wuser.add(r.ccu.get(i));
								}
								// 전체 인원에서 1명 감소 
								/* 경우의 수 
								 * 1 ) 2명 -> 1명 : 상관x
								 * 2 ) 1명 -> 0명 : 방을 삭제 -> 다음 경우로 연관
								 */
								if( r.count == 0) {		// 1감소 후 인원 0명
										room.remove(r);
										sendWait(roomInfo());
									}
							}
							// 전체 방 목록의 갯수
							/* 방 목록의 갯수가 0개가 아닌 경우
							 * 
							 */
							if(room.size() != 0) {		// 클라이언트가 입장한 방의 인원 
									String msg = uroomTag + "//";
									for(int k=0; k<r.ccu.size() ; k++) {
										msg += r.ccu.get(k).nickname+ "@";
									}
									
									for(int t =0; t<r.ccu.size();t++) {	// 남아 있는 회원들의 목록 출력
										try {
											r.ccu.get(t).dos.writeUTF(msg);
											r.ccu.get(t).dos.writeUTF(stayuserTag+"//"+ selRoom+"//"+selUser+"//"+r.ccu.get(t).nickname);
										}catch(IOException e) {
											r.ccu.remove(t--);
										}
									}
							}	// room.size() != 0 
							
							sendWait(roomInfo());
							sendWait(connectedUser());
							
							dos.writeUTF(exitroomUserTag+"//OKAY//"+selUser);
						}		
					}
				}
			
				/* 관리자 권한으로 방 강제 종료*/
				else if(m[0].equals(endroomTag)) {
					for (int i=0; i<room.size();i++) {
						Room r = room.get(i);
						
						if(r.title.equals(m[1])) {
							for(int j =0; j< r.ccu.size();j++) {
								r.ccu.get(j).dos.writeUTF(endroomUserTag+"//OKAY");
								wuser.add(r.ccu.get(j));
							}
							
							for(int k =0;k<r.ccu.size();k++) {
								r.ccu.remove(k);
							}
							r.count =0;
							room.remove(r);
						}
						sendWait(roomInfo());
			//			sendWait(connectedUser());
						dos.writeUTF(endroomTag + "//OKAY//"+r);
					}
				}
				
				/* 관리자 권한으로 회원 강제 탈퇴 */
				else if(m[0].equals(outgameTag)) {
					if(db.OutUser(m[1])) {
						String msg =  cuserTag + "//";
						// 접속 되어 있는 회원에게서 삭제
						for(int i=0; i<auser.size(); i++) {
							if(auser.get(i).nickname.equals(m[1])) {
								auser.remove(i);
							}else {
								msg += auser.get(i).nickname + "@";
							}
						}
						// 대기실에 있는 회원에게서 삭제
						for(int j =0; j<wuser.size(); j++) {
							if(wuser.get(j).nickname.equals(m[1])) {								
								wuser.remove(j);
							}else {
								try {
									wuser.get(j).dos.writeUTF(msg);
								}catch(IOException e) {
									wuser.remove(j--);
								}
							}
						}
						dos.writeUTF(outgameTag+"//OKAY");
					}
					else {
						dos.writeUTF(outgameTag+"//FAIL");
					}
				}
				
			} // while(True) 
			
		} catch(IOException e) {
			System.out.println("[Server] 입출력 오류 > " + e.toString());
		}
	}
	
	void setImgPath(String _m) {
		imgPath = _m;
	}
	
	String getImgPath() {
		return imgPath;
	}
	
	/* 현재 존재하는 방의 목록을 조회 */
	String roomInfo() {
		String msg = vroomTag + "//";
		
		for(int i=0; i<room.size(); i++) {
			msg = msg + room.get(i).title + " : " + room.get(i).count + "@";
		}
		return msg;
	}
	
	/* 클라이언트가 입장한 방의 인원을 조회 */
	String roomUser() {
		String msg = uroomTag + "//";
		
		for(int i=0; i<myRoom.ccu.size(); i++) {
			msg = msg +  myRoom.ccu.get(i).nickname+ "@";
		}
		return msg;
	}
	
	/*( 로그인) 접속한 모든 회원 목록을 조회 */
	String connectedUser() {
		String msg = cuserTag + "//";
		
		for(int i=0; i<auser.size(); i++) {
			msg = msg + auser.get(i).nickname + "@";
		}
		return msg;
	}
	
	/* 대기실에 있는 모든 회원에게 메시지 전송 */
	void sendWait(String m) {
		for(int i=0; i<wuser.size(); i++) {
			try {
				wuser.get(i).dos.writeUTF(m);
			} catch(IOException e) {
				wuser.remove(i--);
			}
		}
	}
	
	/* 방에 입장한 모든 회원에게 메시지 전송 */
	void sendRoom(String m) {
		for(int i=0; i<myRoom.ccu.size(); i++) {
			try {
				myRoom.ccu.get(i).dos.writeUTF(m);
			} catch(IOException e) {
				myRoom.ccu.remove(i--);
			}
		}
	}
}
