package omok;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.regex.Pattern;

import javax.swing.JComboBox;
import javax.swing.ButtonGroup;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JProgressBar;
import javax.swing.JRadioButton;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

public class JoinFrame extends JFrame{
	   /* Panel */
	   JPanel panel = new JPanel();
	   
	   /* Label */
	   JLabel nameL = new JLabel("이름");
	   JLabel nicknameL = new JLabel("닉네임");
	   JLabel idL = new JLabel("아이디");
	   JLabel pwL = new JLabel("비밀번호");
	   JLabel pwstL = new JLabel("비밀번호 강도");
	   JLabel pwConfirmL = new JLabel("비밀번호 확인");
	   JLabel genderL = new JLabel("성별");
	   JLabel birthL = new JLabel(" 생년월일");
	   JLabel phoneL = new JLabel("전화번호");
	   JLabel emailL = new JLabel("이메일");
	   JLabel postL = new JLabel("우편번호");
       JLabel roadL = new JLabel("도로명주소");
       JLabel detailL = new JLabel("상세주소");
       JLabel proImgL = new JLabel();
       
       
       /* TextField */
       JTextField name = new JTextField();
       JTextField nickname = new JTextField();
       JTextField id = new JTextField();
       JPasswordField pw = new JPasswordField();
       JPasswordField pwConfirm = new JPasswordField();
       JTextField phone1 = new JTextField();
       JTextField phone2 = new JTextField();
       JTextField email = new JTextField();
       static JTextField post = new JTextField();
       static JTextField road = new JTextField();
       static JTextField detail = new JTextField();
       
       /* ComboBox */
       JComboBox<String> yearCombo = new JComboBox<String>();
       JComboBox<String> monthCombo = new JComboBox<String>();
       JComboBox<String> dayCombo = new JComboBox<String>();
	   JComboBox<String> phoneCombo = new JComboBox<>(new String[]{"010", "011", "02", "031", "032"});
	   JComboBox<String> emailCombo = new JComboBox<>(new String[]{"@(직접입력)", "@naver.com", "@daum.net", "@gmail.com"});
       
       String[] genders = {"성별","남","여"};
       JComboBox<String> genderCombo = new JComboBox<String>(genders);

       /* 비밀번호 강도 표시기 */
       JProgressBar pwstIndicator = new JProgressBar(0, 100);
      
      /* Button */
      JButton nnolBtn = new JButton("확인");
      JButton idolBtn = new JButton("확인");
      JButton psolBtn = new JButton("확인");
      JButton checkPwBtn = new JButton("확인");
      static JButton postBtn = new JButton("검색");
      JButton imgBtn = new JButton("이미지 선택");
      JButton joinBtn = new JButton("가입하기");
      JButton cancelBtn = new JButton("가입취소");
  
      
      Client c = null;
      
      String role = "";
      
      final String joinTag = "JOIN";   		//회원가입 기능 태그
      final String overTag = "OVER";   		//중복확인 기능 태그
      final String pwTag = "SAFE";   		//비밀번호 유효성 태그
      final String imgTag = "IMG";			//프로필 이미지
      final String imgPathTag = "IMGPATH";	//이미지 절대경로
      final String VimgTag = "VIMG";
         
      JoinFrame(Client _c) {
         c = _c;
         
         setTitle("회원가입");
         
         /* Label 크기 작업 */
         nameL.setPreferredSize(new Dimension(100, 30));
         nicknameL.setPreferredSize(new Dimension(100, 30));
         idL.setPreferredSize(new Dimension(100, 30));
         pwL.setPreferredSize(new Dimension(100, 30));
         pwConfirmL.setPreferredSize(new Dimension(100, 30));
         genderL.setPreferredSize(new Dimension(40,30));
         birthL.setPreferredSize(new Dimension(60,30));
         phoneL.setPreferredSize(new Dimension(100, 30));
         emailL.setPreferredSize(new Dimension(100, 30));
         postL.setPreferredSize(new Dimension(100, 30));
         roadL.setPreferredSize(new Dimension(100, 30));
         detailL.setPreferredSize(new Dimension(100, 30));

         /* TextField 크기 작업 */
         name.setPreferredSize(new Dimension(250, 30));
         nickname.setPreferredSize(new Dimension(185, 30));
         id.setPreferredSize(new Dimension(185, 30));
         pw.setPreferredSize(new Dimension(185, 30));
         pwConfirm.setPreferredSize(new Dimension(185, 30));
         phone1.setPreferredSize(new Dimension(80, 30));
         phone2.setPreferredSize(new Dimension(80, 30));
         email.setPreferredSize(new Dimension(140, 30));
         post.setPreferredSize(new Dimension(185, 30));
         road.setPreferredSize(new Dimension(250, 30));
         detail.setPreferredSize(new Dimension(250, 30));

         /* Button 크기 작업 */
         nnolBtn.setPreferredSize(new Dimension(60, 30));
         idolBtn.setPreferredSize(new Dimension(60, 30));
         psolBtn.setPreferredSize(new Dimension(60, 30));
         checkPwBtn.setPreferredSize(new Dimension(60, 30));
         postBtn.setPreferredSize(new Dimension(60, 30));
         imgBtn.setPreferredSize(new Dimension(270, 30));
         joinBtn.setPreferredSize(new Dimension(135, 30));
         cancelBtn.setPreferredSize(new Dimension(135, 30));
         
         /* ComboBox 크기 및 위치 설정 */
         phoneCombo.setPreferredSize(new Dimension(80, 30));
         emailCombo.setPreferredSize(new Dimension(100, 30));
         emailCombo.setMaximumRowCount(5);
         
         yearCombo.addItem("년도");
         for(int i= 1910; i <= 2023;i++) {
      	   String year = String.valueOf(i);
      	   yearCombo.addItem(year);
         }
         yearCombo.setPreferredSize(new Dimension(70,30));
         
         monthCombo.addItem("월");
         for(int i= 1; i <= 12;i++) {
      	   String month = String.valueOf(i);
      	   monthCombo.addItem(month);
         }
         monthCombo.setPreferredSize(new Dimension(50,30));

         dayCombo.addItem("일");
         for(int i= 1; i <= 31;i++) {
      	   String day = String.valueOf(i);
      	   dayCombo.addItem(day);
         }
         dayCombo.setPreferredSize(new Dimension(50,30));
         
         /* 비밀번호 강도 표시기 설정 */
         pwstL.setPreferredSize(new Dimension(100, 0));
         pwstIndicator.setPreferredSize(new Dimension(250, 15));
         pwstIndicator.setStringPainted(true);
          
         /* 프로필 이미지 설정 */
         proImgL.setPreferredSize(new Dimension(230, 240));
         proImgL.setHorizontalAlignment(SwingConstants.CENTER); // 레이블 내용 가운데 정렬
         
         // 레이블에 테두리 생성
         Border border = LineBorder.createGrayLineBorder();
         proImgL.setBorder(border);
         
         // 새로운 메서드를 호출하여 기본 프로필 이미지를 설정합니다.
         setDefaultProfileImage();
           
         /* Panel 추가 작업 */
         setContentPane(panel);   //panel을 기본 컨테이너로 설정

         panel.add(nameL);
         panel.add(name);
         
         panel.add(nicknameL);
         panel.add(nickname);
         panel.add(nnolBtn);
         
         panel.add(idL);
         panel.add(id);
         panel.add(idolBtn);
         
         panel.add(pwL);
         panel.add(pw);
         panel.add(psolBtn);
         panel.add(pwstL);
         panel.add(pwstIndicator);
         panel.add(pwConfirmL);
         panel.add(pwConfirm);
         panel.add(checkPwBtn);
         
         panel.add(genderL);
         panel.add(genderCombo);
         
         panel.add(birthL);
         panel.add(yearCombo);
         panel.add(monthCombo);
         panel.add(dayCombo);
         
         panel.add(phoneL);
         panel.add(phoneCombo);
         panel.add(phone1);
         panel.add(phone2);

         panel.add(emailL);
         panel.add(email);
         panel.add(emailCombo);

         panel.add(postL);
         panel.add(post);
         panel.add(postBtn);

         panel.add(roadL);
         panel.add(road);
         panel.add(detailL);
         panel.add(detail);

         panel.add(proImgL);
         panel.add(imgBtn);

         panel.add(cancelBtn);
         panel.add(joinBtn);

        /* Button 이벤트 리스너 추가 */
        ButtonListener bl = new ButtonListener();
        
        cancelBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // 모든 입력 필드 리셋
                name.setText("");
                nickname.setText("");
                id.setText("");
                pw.setText("");
                pwConfirm.setText("");
                genderCombo.setSelectedIndex(0);
                yearCombo.setSelectedIndex(0);
                monthCombo.setSelectedIndex(0);
                dayCombo.setSelectedIndex(0);
                phoneCombo.setSelectedIndex(0);
                phone1.setText("");
                phone2.setText("");
                email.setText("");
                post.setText("");
                road.setText("");
                detail.setText("");
                proImgL.setIcon(null);

                dispose();
            }
        });

        joinBtn.addActionListener(bl);
        
        /* Button 이벤트 추가 */
        nnolBtn.addActionListener(new ActionListener() {
           @Override
           public void actionPerformed(ActionEvent e) {
              if(!nickname.getText().equals("")) {
                 System.out.println("[Client] 닉네임 중복 확인");
                 c.sendMsg(overTag + "//nickname//" + nickname.getText());   //서버에 태그와 함께 닉네임 전송
              }
           }
        });
        
        idolBtn.addActionListener(new ActionListener() {
           @Override
           public void actionPerformed(ActionEvent e) {
              if(!id.getText().equals("")) {
                 System.out.println("[Client] 아이디 중복 확인");
                 c.sendMsg(overTag + "//id//" + id.getText());   //서버에 태그와 함께 아이디 전송
              }
           }
        });
        
        psolBtn.addActionListener(new ActionListener() {
           @Override
           public void actionPerformed(ActionEvent e) {
              if(!pw.getPassword().toString().equals("")) {
                 System.out.println("[Client] 비밀번호 유효성 확인");
                 c.sendMsg(pwTag + "//pw//" +String.valueOf(pw.getPassword()));   //서버에 태그와 함께 비밀번호 전송
              }
           }
        });
        
        /* 비밀번호 강도 표시기 이벤트 리스너 */
	    pw.getDocument().addDocumentListener(new DocumentListener() {
	          @Override
	          public void insertUpdate(DocumentEvent e) {
	              updateStrengthIndicator();
	          }
	          @Override
	          public void removeUpdate(DocumentEvent e) {
	              updateStrengthIndicator();
	          }
	          @Override
	          public void changedUpdate(DocumentEvent e) {
	              updateStrengthIndicator();
	          }
	     });
          
          checkPwBtn.addActionListener(new ActionListener() {
              @Override
              public void actionPerformed(ActionEvent e) {
                  String password = String.valueOf(pw.getPassword());
                  String confirmPassword = String.valueOf(pwConfirm.getPassword());

                  if (password.equals(confirmPassword)) {
                      JOptionPane.showMessageDialog(null, "비밀번호가 일치합니다.", "확인", JOptionPane.INFORMATION_MESSAGE);
                  } else {
                      JOptionPane.showMessageDialog(null, "비밀번호가 일치하지 않습니다.", "오류", JOptionPane.ERROR_MESSAGE);
                  }
              }
          });
          
          /* ComboBox 이벤트 리스너 */
          emailCombo.addActionListener(new ActionListener() {
              @Override
              public void actionPerformed(ActionEvent e) {
            	  		JComboBox<String> cb = (JComboBox<String>) e.getSource();
		                String selectedDomain = (String) cb.getSelectedItem();
		                  
		                String[] _e = (email.getText()).split("@");
		                String emailStr = _e[0];
		                  
		                if (selectedDomain.equals("@(직접입력)")) {
		                    String customDomain = JOptionPane.showInputDialog(null, "이메일 도메인을 입력합니다 :");
		                    if (customDomain != null && !customDomain.isEmpty()) {
		                        email.setText(emailStr + "@" + customDomain);
		                    } else {
		                      // 주소를 입력하지 않은 경우, 아무거솓 실행하지 않음 .
		                  	  email.setText(emailStr);
		                        emailCombo.setSelectedIndex(0);; // Select the first item "(직접입력)"
		                    }
		                 //나머지 도에민 주소 클릭시
		                } else {
		                    email.setText(emailStr + selectedDomain);
		                }
              }
          });

        postBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
            	AddressSearchFrame asF = new AddressSearchFrame();
                asF.setVisible(true);
            }
        });

        imgBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                JFileChooser fileChooser = new JFileChooser();
                fileChooser.setDialogTitle("프로필 이미지 선택");
                fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY); // 파일 선택 모드 설정
                int userSelection = fileChooser.showOpenDialog(JoinFrame.this);

                // 파일 선택 다이얼로그를 통해 이미지 선택
                if (userSelection == JFileChooser.APPROVE_OPTION) {
                    File imageFile = fileChooser.getSelectedFile();
                    ImageIcon originalImageIcon = new ImageIcon(imageFile.getAbsolutePath());
                    Image originalImage = originalImageIcon.getImage();
                    Image scaledImage = originalImage.getScaledInstance(proImgL.getWidth(), proImgL.getHeight(), Image.SCALE_SMOOTH);
                    ImageIcon  scaledImageIcon = new ImageIcon(scaledImage);
   
                    c.sendMsg(imgPathTag+"//"+imageFile.getAbsolutePath());
                    c.sendMsg(imgTag+ "//"+ imageFile.getAbsolutePath() );
                    proImgL.setIcon(scaledImageIcon);
                }
            }
        });
        
      
      setSize(380, 770);
      setLocationRelativeTo(null);
      setResizable(false);
   }

   // 비밀번호 강도 표시를 업데이트하는 함수
      private void updateStrengthIndicator() {
          String password = String.valueOf(pw.getPassword());
          int strength = calculatePasswordStrength(password);

          // 표시의 값과 색상 업데이트
          pwstIndicator.setValue(strength);
          if (strength < 50) {
             pwstIndicator.setForeground(Color.RED);
          } else if (strength < 80) {
             pwstIndicator.setForeground(Color.ORANGE);
          } else {
             pwstIndicator.setForeground(Color.GREEN);
          }
      }

      // 비밀번호 강도를 계산하는 함수 (기준을 조정할 수 있습니다)
      private int calculatePasswordStrength(String password) {
          int strength = 0;

          // - 최소 8자 이상
          // - 적어도 하나의 대문자 포함
          // - 적어도 하나의 소문자 포함
          // - 적어도 하나의 숫자 포함
          // - 적어도 하나의 특수 문자 포함

        if (password.length() >= 8) {
            strength += 20;
        }
        if (Pattern.compile("[A-Z]").matcher(password).find()) {
            strength += 20;
        }
        if (Pattern.compile("[a-z]").matcher(password).find()) {
            strength += 20;
        }
        if (Pattern.compile("\\d").matcher(password).find()) {
            strength += 20;
        }
        if (Pattern.compile("[!@#$%^&*]").matcher(password).find()) {
            strength += 20;
        }
        return Math.min(strength, 100); // 강도를 100으로 제한
    }

      /* Button 이벤트 리스너 */
    class ButtonListener implements ActionListener{
       @Override
       public void actionPerformed(ActionEvent e) {
          JButton b = (JButton)e.getSource();
          
          /* TextField에 입력된 회원 정보들을 변수에 초기화 */
          String uname = name.getText();
          String unick = nickname.getText();
          String uid = id.getText();
          String upass = "";
          for(int i=0; i<pw.getPassword().length; i++) {
             upass = upass + pw.getPassword()[i];
          }
          String upwcon = String.valueOf(pwConfirm.getPassword());
          String ugender =(String) genderCombo.getSelectedItem();
          String uyear = (String) yearCombo.getSelectedItem();
          String umonth = (String) monthCombo.getSelectedItem();
          String uday = (String) dayCombo.getSelectedItem();
          String uphone = (String) phoneCombo.getSelectedItem();
          String uphone1 = phone1.getText();
          String uphone2 = phone2.getText();
          String uemail = email.getText();
          String upost = post.getText();
          String uroad = road.getText();
          String udetail = detail.getText();
          String urole = role;

          /* 가입취소 버튼 이벤트 */
          if(b.getText().equals("가입취소")) {
             System.out.println("[Client] 회원가입 인터페이스 종료");
             
               // 모든 입력 필드 리셋
               name.setText("");
               nickname.setText("");
               id.setText("");
               pw.setText("");
               pwConfirm.setText("");
               genderCombo.setSelectedIndex(0);
               yearCombo.setSelectedIndex(0);
               monthCombo.setSelectedIndex(0);
               dayCombo.setSelectedIndex(0);
               phoneCombo.setSelectedIndex(0);
               phone1.setText("");
               phone2.setText("");
               email.setText("");
               post.setText("");
               road.setText("");
               detail.setText("");
               proImgL.setIcon(null);
               
               dispose();
          }
          
          /* 가입하기 버튼 이벤트 */
          else if (b.getText().equals("가입하기")) {
              if (uname.equals("") || unick.equals("") || uid.equals("") || upass.equals("") || upwcon.equals("") || ugender.equals("성별") || uyear.equals("년도") || umonth.equals("월") || uday.equals("일") || uphone.equals("") || uphone1.equals("") || uphone2.equals("") || uemail.equals("") || upost.equals("") || uroad.equals("") || udetail.equals("")) {
            	  // 모든 정보가 입력되지 않으면 회원가입 시도 실패
                  JOptionPane.showMessageDialog(null, "모든 정보를 기입해주세요", "회원가입 실패", JOptionPane.ERROR_MESSAGE);
                  System.out.println("[Client] 회원가입 실패 : 회원정보 미입력");
              } else if (!uname.equals("") && !unick.equals("") && !uid.equals("") && !upass.equals("") && !upwcon.equals("") && !ugender.equals("성별") && !uyear.equals("년도") && !umonth.equals("월") && !uday.equals("일") && !unick.equals("") && !uphone.equals("") && !uphone2.equals("") && !uemail.equals("") && !upost.equals("") && !uroad.equals("") && !udetail.equals("")) {
            	  String uphone_full = uphone+uphone1+uphone2;
            	  // 회원가입 시도 성공
                  c.sendMsg(joinTag + "//" + uname + "//" + unick + "//" + uid + "//" + upass + "//" + ugender + "//" + uyear + "//" + umonth + "//" + uday + "//" + uphone_full + "//" + uemail + "//" + upost + "//" + uroad + "//" + udetail + "//" + urole);   // 서버에 회원가입 정보 전송
              }
          }
    }

    }
	public static void setzipNoField(String selectedAddress) {
	     post.setText( selectedAddress);
	}

	public static void setAddressField(String selectedAddress) {
		 road.setText(selectedAddress);
	}
	
	private void setDefaultProfileImage() {
	    String defaultImagePath = "D:/hyuna/joindefalutimage.png";
	    ImageIcon defaultImageIcon = new ImageIcon(defaultImagePath);

	    // 기본 이미지를 프로필 이미지 레이블에 설정
	    proImgL.setIcon(defaultImageIcon);
	}
}
